     1                                  extern printf
     2                                  extern scanf
     3                                  
     4                                  extern strcmp
     5                                  extern strcat
     6                                  extern strcpy
     7                                  
     8                                  
     9                                  extern malloc
    10                                  extern memcpy
    11                                  extern free
    12                                  
    13                                  
    14                                  struc map
    15 00000000 <res 00000004>          .index RESD 1
    16 00000004 <res 00000004>          .value RESD 1
    17                                  .size:
    18                                  endstruc
    19                                  
    20                                  
    21                                  
    22                                  struc vecmap
    23 00000000 <res 00000008>          .x1 RESB map.size
    24 00000008 <res 00000008>          .x2 RESB map.size
    25                                  .size:
    26                                  endstruc
    27                                  
    28                                  
    29                                  
    30                                  struc firstClass
    31 00000000 <res 00000004>          .num RESD 1
    32 00000004 <res 00000004>          .flag RESD 1
    33                                  .size:
    34                                  endstruc
    35                                  
    36                                  
    37                                  
    38                                  struc point
    39 00000000 <res 00000004>          .x RESD 1
    40 00000004 <res 00000004>          .y RESD 1
    41                                  .size:
    42                                  endstruc
    43                                  
    44                                  
    45                                  
    46                                  struc vector
    47 00000000 <res 00000008>          .a RESB point.size
    48 00000008 <res 00000008>          .b RESB point.size
    49                                  .size:
    50                                  endstruc
    51                                  
    52                                  
    53                                  
    54                                  struc dvector
    55 00000000 <res 00000010>          .v1 RESB vector.size
    56 00000010 <res 00000010>          .v2 RESB vector.size
    57                                  .size:
    58                                  endstruc
    59                                  
    60                                  
    61                                  
    62                                  section .text
    63                                  global main
    64                                  
    65                                  glob_assign:
    66 00000000 55                      push ebp
    67 00000001 89E5                    mov ebp, esp
    68 00000003 60                      pusha
    69 00000004 6A08                    push 8
    70 00000006 E8(00000000)            call malloc
    71 0000000B 83C404                  add esp, 4
    72 0000000E A3[00000000]            mov [motherfucker], eax
    73 00000013 61                      popa
    74 00000014 6A01                    push 1
    75 00000016 58                      pop eax
    76 00000017 8B0D[00000000]          mov ecx, [motherfucker]
    77 0000001D 894104                  mov [ecx + firstClass.flag], eax
    78 00000020 68D0050000              push 1488
    79 00000025 58                      pop eax
    80 00000026 8B0D[00000000]          mov ecx, [motherfucker]
    81 0000002C 8901                    mov [ecx + firstClass.num], eax
    82 0000002E 89EC                    mov esp, ebp
    83 00000030 5D                      pop ebp
    84 00000031 C3                      ret
    85                                  
    86                                  
    87                                  doNothing:
    88 00000032 55                      push ebp
    89 00000033 89E5                    mov ebp, esp
    90 00000035 83EC08                  sub esp, 8
    91 00000038 8B4D08                  mov ecx, [ebp + 8]
    92 0000003B FF31                    push dword [ecx + firstClass.num]
    93 0000003D 68[00000000]            push int_format
    94 00000042 E8(00000000)            call printf
    95 00000047 83C408                  add esp, 8
    96 0000004A 60                      pusha
    97 0000004B 6A08                    push 8
    98 0000004D E8(00000000)            call malloc
    99 00000052 83C404                  add esp, 4
   100 00000055 8945FC                  mov [ebp - 4], eax
   101 00000058 61                      popa
   102 00000059 FF7508                  push dword [ebp + 8]
   103 0000005C 58                      pop eax
   104 0000005D FF7508                  push dword [ebp + 8]
   105 00000060 58                      pop eax
   106 00000061 60                      pusha
   107 00000062 6A08                    push 8
   108 00000064 50                      push eax
   109 00000065 FF75FC                  push dword [ebp - 4]
   110 00000068 E8(00000000)            call memcpy
   111 0000006D 83C40C                  add esp, 12
   112 00000070 61                      popa
   113 00000071 8B4DFC                  mov ecx, [ebp - 4]
   114 00000074 68D0050000              push 1488
   115 00000079 58                      pop eax
   116 0000007A 8B4DFC                  mov ecx, [ebp - 4]
   117 0000007D 8901                    mov [ecx + firstClass.num], eax
   118 0000007F 8B4D08                  mov ecx, [ebp + 8]
   119 00000082 FF31                    push dword [ecx + firstClass.num]
   120 00000084 68[00000000]            push int_format
   121 00000089 E8(00000000)            call printf
   122 0000008E 83C408                  add esp, 8
   123 00000091 8B4DFC                  mov ecx, [ebp - 4]
   124 00000094 FF31                    push dword [ecx + firstClass.num]
   125 00000096 68[00000000]            push int_format
   126 0000009B E8(00000000)            call printf
   127 000000A0 83C408                  add esp, 8
   128 000000A3 60                      pusha
   129 000000A4 FF75FC                  push dword [ebp - 4]
   130 000000A7 E8(00000000)            call free
   131 000000AC 83C404                  add esp, 4
   132 000000AF 61                      popa
   133 000000B0 89EC                    mov esp, ebp
   134 000000B2 5D                      pop ebp
   135 000000B3 C20400                  ret 4
   136                                  
   137                                  
   138                                  
   139                                  recurse:
   140 000000B6 55                      push ebp
   141 000000B7 89E5                    mov ebp, esp
   142 000000B9 83EC04                  sub esp, 4
   143 000000BC FF7508                  push dword [ebp + 8]
   144 000000BF 6A14                    push 20
   145 000000C1 5B                      pop ebx
   146 000000C2 5A                      pop edx
   147 000000C3 39DA                    cmp edx, ebx
   148 000000C5 7207                    jb  L67
   149 000000C7 B800000000              mov eax, 0
   150 000000CC EB05                    jmp L68
   151                                  L67:
   152 000000CE B801000000              mov eax, 1
   153                                  L68:
   154 000000D3 50                      push eax
   155 000000D4 58                      pop eax
   156 000000D5 83F801                  cmp eax, 1
   157 000000D8 7516                    jne L61
   158 000000DA FF7508                  push dword [ebp + 8]
   159 000000DD 6A01                    push 1
   160 000000DF 5B                      pop ebx
   161 000000E0 5A                      pop edx
   162 000000E1 01DA                    add edx, ebx
   163 000000E3 89D0                    mov eax, edx
   164 000000E5 50                      push eax
   165 000000E6 E8CBFFFFFF              call recurse
   166 000000EB 50                      push eax
   167 000000EC 58                      pop eax
   168 000000ED 894508                  mov [ebp + 8], eax
   169                                  L61:
   170 000000F0 FF7508                  push dword [ebp + 8]
   171 000000F3 58                      pop eax
   172 000000F4 89EC                    mov esp, ebp
   173 000000F6 5D                      pop ebp
   174 000000F7 C20400                  ret 4
   175                                  
   176                                  
   177                                  
   178                                  getSqDistance:
   179 000000FA 55                      push ebp
   180 000000FB 89E5                    mov ebp, esp
   181 000000FD 83EC08                  sub esp, 8
   182 00000100 8B4D08                  mov ecx, [ebp + 8]
   183 00000103 FF31                    push dword [ecx + vector.a + point.x]
   184 00000105 8B4D08                  mov ecx, [ebp + 8]
   185 00000108 FF7108                  push dword [ecx + vector.b + point.x]
   186 0000010B 5B                      pop ebx
   187 0000010C 5A                      pop edx
   188 0000010D 29DA                    sub edx, ebx
   189 0000010F 89D0                    mov eax, edx
   190 00000111 50                      push eax
   191 00000112 8B4D08                  mov ecx, [ebp + 8]
   192 00000115 FF31                    push dword [ecx + vector.a + point.x]
   193 00000117 8B4D08                  mov ecx, [ebp + 8]
   194 0000011A FF7108                  push dword [ecx + vector.b + point.x]
   195 0000011D 5B                      pop ebx
   196 0000011E 5A                      pop edx
   197 0000011F 29DA                    sub edx, ebx
   198 00000121 89D0                    mov eax, edx
   199 00000123 50                      push eax
   200 00000124 5B                      pop ebx
   201 00000125 58                      pop eax
   202 00000126 F7EB                    imul ebx
   203 00000128 50                      push eax
   204 00000129 8B4D08                  mov ecx, [ebp + 8]
   205 0000012C FF7104                  push dword [ecx + vector.a + point.y]
   206 0000012F 8B4D08                  mov ecx, [ebp + 8]
   207 00000132 FF710C                  push dword [ecx + vector.b + point.y]
   208 00000135 5B                      pop ebx
   209 00000136 5A                      pop edx
   210 00000137 29DA                    sub edx, ebx
   211 00000139 89D0                    mov eax, edx
   212 0000013B 50                      push eax
   213 0000013C 8B4D08                  mov ecx, [ebp + 8]
   214 0000013F FF7104                  push dword [ecx + vector.a + point.y]
   215 00000142 8B4D08                  mov ecx, [ebp + 8]
   216 00000145 FF710C                  push dword [ecx + vector.b + point.y]
   217 00000148 5B                      pop ebx
   218 00000149 5A                      pop edx
   219 0000014A 29DA                    sub edx, ebx
   220 0000014C 89D0                    mov eax, edx
   221 0000014E 50                      push eax
   222 0000014F 5B                      pop ebx
   223 00000150 58                      pop eax
   224 00000151 F7EB                    imul ebx
   225 00000153 50                      push eax
   226 00000154 5B                      pop ebx
   227 00000155 5A                      pop edx
   228 00000156 01DA                    add edx, ebx
   229 00000158 89D0                    mov eax, edx
   230 0000015A 50                      push eax
   231 0000015B 58                      pop eax
   232 0000015C 8945FC                  mov [ebp - 4], eax
   233 0000015F FF75FC                  push dword [ebp - 4]
   234 00000162 58                      pop eax
   235 00000163 89EC                    mov esp, ebp
   236 00000165 5D                      pop ebp
   237 00000166 C20400                  ret 4
   238                                  
   239                                  
   240                                  
   241                                  getBean:
   242 00000169 55                      push ebp
   243 0000016A 89E5                    mov ebp, esp
   244 0000016C 83EC0C                  sub esp, 12
   245 0000016F 60                      pusha
   246 00000170 6A08                    push 8
   247 00000172 E8(00000000)            call malloc
   248 00000177 83C404                  add esp, 4
   249 0000017A 8945FC                  mov [ebp - 4], eax
   250 0000017D 61                      popa
   251 0000017E 6A00                    push 0
   252 00000180 58                      pop eax
   253 00000181 8B4DFC                  mov ecx, [ebp - 4]
   254 00000184 894104                  mov [ecx + firstClass.flag], eax
   255 00000187 6A06                    push 6
   256 00000189 58                      pop eax
   257 0000018A 8B4DFC                  mov ecx, [ebp - 4]
   258 0000018D 8901                    mov [ecx + firstClass.num], eax
   259 0000018F 8B4DFC                  mov ecx, [ebp - 4]
   260 00000192 FF7104                  push dword [ecx + firstClass.flag]
   261 00000195 FF35[18000000]          push dword [globIntVar]
   262 0000019B 6A00                    push 0
   263 0000019D 5B                      pop ebx
   264 0000019E 5A                      pop edx
   265 0000019F 39DA                    cmp edx, ebx
   266 000001A1 7407                    je  L189
   267 000001A3 B800000000              mov eax, 0
   268 000001A8 EB05                    jmp L190
   269                                  L189:
   270 000001AA B801000000              mov eax, 1
   271                                  L190:
   272 000001AF 50                      push eax
   273 000001B0 5B                      pop ebx
   274 000001B1 5A                      pop edx
   275 000001B2 83FA01                  cmp edx, 1
   276 000001B5 750C                    jne L177
   277 000001B7 83FB01                  cmp ebx, 1
   278 000001BA 7507                    jne L177
   279 000001BC B801000000              mov eax, 1
   280 000001C1 EB05                    jmp L178
   281                                  L177:
   282 000001C3 B800000000              mov eax, 0
   283                                  L178:
   284 000001C8 50                      push eax
   285 000001C9 58                      pop eax
   286 000001CA 8945F8                  mov [ebp - 8], eax
   287 000001CD FF75F8                  push dword [ebp - 8]
   288 000001D0 58                      pop eax
   289 000001D1 83F801                  cmp eax, 1
   290 000001D4 7515                    jne L201
   291 000001D6 8B4DFC                  mov ecx, [ebp - 4]
   292 000001D9 FF7104                  push dword [ecx + firstClass.flag]
   293 000001DC 68[00000000]            push int_format
   294 000001E1 E8(00000000)            call printf
   295 000001E6 83C408                  add esp, 8
   296 000001E9 EB12                    jmp L202
   297                                  L201:
   298 000001EB 8B4DFC                  mov ecx, [ebp - 4]
   299 000001EE FF31                    push dword [ecx + firstClass.num]
   300 000001F0 68[00000000]            push int_format
   301 000001F5 E8(00000000)            call printf
   302 000001FA 83C408                  add esp, 8
   303                                  L202:
   304 000001FD FF75FC                  push dword [ebp - 4]
   305 00000200 6A08                    push 8
   306 00000202 E8(00000000)            call malloc
   307 00000207 83C404                  add esp, 4
   308 0000020A 5B                      pop ebx
   309 0000020B 6A08                    push 8
   310 0000020D 53                      push ebx
   311 0000020E 50                      push eax
   312 0000020F E8(00000000)            call memcpy
   313 00000214 83C40C                  add esp, 12
   314 00000217 50                      push eax
   315 00000218 58                      pop eax
   316 00000219 60                      pusha
   317 0000021A FF75FC                  push dword [ebp - 4]
   318 0000021D E8(00000000)            call free
   319 00000222 83C404                  add esp, 4
   320 00000225 61                      popa
   321 00000226 89EC                    mov esp, ebp
   322 00000228 5D                      pop ebp
   323 00000229 C3                      ret
   324                                  
   325                                  
   326                                  
   327                                  strread:
   328 0000022A 55                      push ebp
   329 0000022B 89E5                    mov ebp, esp
   330 0000022D 83EC08                  sub esp, 8
   331 00000230 60                      pusha
   332 00000231 6800010000              push 256
   333 00000236 E8(00000000)            call malloc
   334 0000023B 83C404                  add esp, 4
   335 0000023E 8945FC                  mov [ebp - 4], eax
   336 00000241 FF75FC                  push dword [ebp - 4]
   337 00000244 68[0C000000]            push str_format
   338 00000249 E8(00000000)            call scanf
   339 0000024E 83C408                  add esp, 8
   340 00000251 61                      popa
   341 00000252 FF75FC                  push dword [ebp - 4]
   342 00000255 6800010000              push 256
   343 0000025A E8(00000000)            call malloc
   344 0000025F 83C404                  add esp, 4
   345 00000262 5B                      pop ebx
   346 00000263 53                      push ebx
   347 00000264 50                      push eax
   348 00000265 E8(00000000)            call strcpy
   349 0000026A 83C408                  add esp, 8
   350 0000026D 50                      push eax
   351 0000026E 58                      pop eax
   352 0000026F 60                      pusha
   353 00000270 FF75FC                  push dword [ebp - 4]
   354 00000273 E8(00000000)            call free
   355 00000278 83C404                  add esp, 4
   356 0000027B 61                      popa
   357 0000027C 89EC                    mov esp, ebp
   358 0000027E 5D                      pop ebp
   359 0000027F C3                      ret
   360                                  
   361                                  
   362                                  
   363                                  main:
   364 00000280 55                      push ebp
   365 00000281 89E5                    mov ebp, esp
   366 00000283 83EC14                  sub esp, 20
   367 00000286 60                      pusha
   368 00000287 E874FDFFFF              call glob_assign
   369 0000028C 61                      popa
   370 0000028D 8B0D[00000000]          mov ecx, [motherfucker]
   371 00000293 FF31                    push dword [ecx + firstClass.num]
   372 00000295 68[00000000]            push int_format
   373 0000029A E8(00000000)            call printf
   374 0000029F 83C408                  add esp, 8
   375 000002A2 68[38000000]            push tmp1
   376 000002A7 68[0C000000]            push str_format
   377 000002AC E8(00000000)            call printf
   378 000002B1 83C408                  add esp, 8
   379 000002B4 8B0D[00000000]          mov ecx, [motherfucker]
   380 000002BA FF7104                  push dword [ecx + firstClass.flag]
   381 000002BD 68[00000000]            push int_format
   382 000002C2 E8(00000000)            call printf
   383 000002C7 83C408                  add esp, 8
   384 000002CA 68[40000000]            push tmp2
   385 000002CF 68[0C000000]            push str_format
   386 000002D4 E8(00000000)            call printf
   387 000002D9 83C408                  add esp, 8
   388 000002DC 6A02                    push 2
   389 000002DE 58                      pop eax
   390 000002DF 8B0D[00000000]          mov ecx, [motherfucker]
   391 000002E5 8901                    mov [ecx + firstClass.num], eax
   392 000002E7 6A00                    push 0
   393 000002E9 58                      pop eax
   394 000002EA 8B0D[00000000]          mov ecx, [motherfucker]
   395 000002F0 894104                  mov [ecx + firstClass.flag], eax
   396 000002F3 8B0D[00000000]          mov ecx, [motherfucker]
   397 000002F9 FF31                    push dword [ecx + firstClass.num]
   398 000002FB 68[00000000]            push int_format
   399 00000300 E8(00000000)            call printf
   400 00000305 83C408                  add esp, 8
   401 00000308 68[48000000]            push tmp3
   402 0000030D 68[0C000000]            push str_format
   403 00000312 E8(00000000)            call printf
   404 00000317 83C408                  add esp, 8
   405 0000031A 8B0D[00000000]          mov ecx, [motherfucker]
   406 00000320 FF7104                  push dword [ecx + firstClass.flag]
   407 00000323 68[00000000]            push int_format
   408 00000328 E8(00000000)            call printf
   409 0000032D 83C408                  add esp, 8
   410 00000330 68[50000000]            push tmp4
   411 00000335 68[0C000000]            push str_format
   412 0000033A E8(00000000)            call printf
   413 0000033F 83C408                  add esp, 8
   414 00000342 60                      pusha
   415 00000343 6A08                    push 8
   416 00000345 E8(00000000)            call malloc
   417 0000034A 83C404                  add esp, 4
   418 0000034D 8945FC                  mov [ebp - 4], eax
   419 00000350 61                      popa
   420 00000351 6A00                    push 0
   421 00000353 58                      pop eax
   422 00000354 8B4DFC                  mov ecx, [ebp - 4]
   423 00000357 894104                  mov [ecx + point.y], eax
   424 0000035A 6A00                    push 0
   425 0000035C 58                      pop eax
   426 0000035D 8B4DFC                  mov ecx, [ebp - 4]
   427 00000360 8901                    mov [ecx + point.x], eax
   428 00000362 60                      pusha
   429 00000363 6A08                    push 8
   430 00000365 E8(00000000)            call malloc
   431 0000036A 83C404                  add esp, 4
   432 0000036D 8945F8                  mov [ebp - 8], eax
   433 00000370 61                      popa
   434 00000371 6A04                    push 4
   435 00000373 58                      pop eax
   436 00000374 8B4DF8                  mov ecx, [ebp - 8]
   437 00000377 894104                  mov [ecx + point.y], eax
   438 0000037A 6A03                    push 3
   439 0000037C 58                      pop eax
   440 0000037D 8B4DF8                  mov ecx, [ebp - 8]
   441 00000380 8901                    mov [ecx + point.x], eax
   442 00000382 60                      pusha
   443 00000383 6A10                    push 16
   444 00000385 E8(00000000)            call malloc
   445 0000038A 83C404                  add esp, 4
   446 0000038D 8945F0                  mov [ebp - 16], eax
   447 00000390 61                      popa
   448 00000391 FF75FC                  push dword [ebp - 4]
   449 00000394 58                      pop eax
   450 00000395 8B4DF0                  mov ecx, [ebp - 16]
   451 00000398 8B10                    mov edx, [eax  + point.x]
   452 0000039A 895108                  mov [ecx + vector.b + point.x], edx
   453 0000039D 8B4DF0                  mov ecx, [ebp - 16]
   454 000003A0 8B5004                  mov edx, [eax  + point.y]
   455 000003A3 89510C                  mov [ecx + vector.b + point.y], edx
   456 000003A6 FF75F8                  push dword [ebp - 8]
   457 000003A9 58                      pop eax
   458 000003AA 8B4DF0                  mov ecx, [ebp - 16]
   459 000003AD 8B10                    mov edx, [eax  + point.x]
   460 000003AF 8911                    mov [ecx + vector.a + point.x], edx
   461 000003B1 8B4DF0                  mov ecx, [ebp - 16]
   462 000003B4 8B5004                  mov edx, [eax  + point.y]
   463 000003B7 895104                  mov [ecx + vector.a + point.y], edx
   464 000003BA 60                      pusha
   465 000003BB 6A08                    push 8
   466 000003BD E8(00000000)            call malloc
   467 000003C2 83C404                  add esp, 4
   468 000003C5 8945F4                  mov [ebp - 12], eax
   469 000003C8 61                      popa
   470 000003C9 8B4DF0                  mov ecx, [ebp - 16]
   471 000003CC FF31                    push dword [ecx + vector.a]
   472 000003CE 58                      pop eax
   473 000003CF 8B4DF0                  mov ecx, [ebp - 16]
   474 000003D2 51                      push ecx
   475 000003D3 58                      pop eax
   476 000003D4 8B4DF4                  mov ecx, [ebp - 12]
   477 000003D7 8B10                    mov edx, [eax  + vector.a + point.x]
   478 000003D9 8911                    mov [ecx  + point.x], edx
   479 000003DB 8B4DF4                  mov ecx, [ebp - 12]
   480 000003DE 8B5004                  mov edx, [eax  + vector.a + point.y]
   481 000003E1 895104                  mov [ecx  + point.y], edx
   482 000003E4 8B4DF4                  mov ecx, [ebp - 12]
   483 000003E7 FF75F4                  push dword [ebp - 12]
   484 000003EA 58                      pop eax
   485 000003EB 8B4DF0                  mov ecx, [ebp - 16]
   486 000003EE 8B10                    mov edx, [eax  + point.x]
   487 000003F0 895108                  mov [ecx + vector.b + point.x], edx
   488 000003F3 8B4DF0                  mov ecx, [ebp - 16]
   489 000003F6 8B5004                  mov edx, [eax  + point.y]
   490 000003F9 89510C                  mov [ecx + vector.b + point.y], edx
   491 000003FC 68[58000000]            push tmp5
   492 00000401 68[0C000000]            push str_format
   493 00000406 E8(00000000)            call printf
   494 0000040B 83C408                  add esp, 8
   495 0000040E 8B4DF0                  mov ecx, [ebp - 16]
   496 00000411 FF31                    push dword [ecx + vector.a + point.x]
   497 00000413 68[00000000]            push int_format
   498 00000418 E8(00000000)            call printf
   499 0000041D 83C408                  add esp, 8
   500 00000420 68[64000000]            push tmp6
   501 00000425 68[0C000000]            push str_format
   502 0000042A E8(00000000)            call printf
   503 0000042F 83C408                  add esp, 8
   504 00000432 8B4DF0                  mov ecx, [ebp - 16]
   505 00000435 FF7104                  push dword [ecx + vector.a + point.y]
   506 00000438 68[00000000]            push int_format
   507 0000043D E8(00000000)            call printf
   508 00000442 83C408                  add esp, 8
   509 00000445 68[70000000]            push tmp7
   510 0000044A 68[0C000000]            push str_format
   511 0000044F E8(00000000)            call printf
   512 00000454 83C408                  add esp, 8
   513 00000457 8B4DF0                  mov ecx, [ebp - 16]
   514 0000045A FF7108                  push dword [ecx + vector.b + point.x]
   515 0000045D 68[00000000]            push int_format
   516 00000462 E8(00000000)            call printf
   517 00000467 83C408                  add esp, 8
   518 0000046A 68[7C000000]            push tmp8
   519 0000046F 68[0C000000]            push str_format
   520 00000474 E8(00000000)            call printf
   521 00000479 83C408                  add esp, 8
   522 0000047C 8B4DF0                  mov ecx, [ebp - 16]
   523 0000047F FF710C                  push dword [ecx + vector.b + point.y]
   524 00000482 68[00000000]            push int_format
   525 00000487 E8(00000000)            call printf
   526 0000048C 83C408                  add esp, 8
   527 0000048F 68[88000000]            push tmp9
   528 00000494 68[0C000000]            push str_format
   529 00000499 E8(00000000)            call printf
   530 0000049E 83C408                  add esp, 8
   531 000004A1 6A00                    push 0
   532 000004A3 58                      pop eax
   533 000004A4 60                      pusha
   534 000004A5 FF75F0                  push dword [ebp - 16]
   535 000004A8 E8(00000000)            call free
   536 000004AD 83C404                  add esp, 4
   537 000004B0 61                      popa
   538 000004B1 60                      pusha
   539 000004B2 FF75FC                  push dword [ebp - 4]
   540 000004B5 E8(00000000)            call free
   541 000004BA 83C404                  add esp, 4
   542 000004BD 61                      popa
   543 000004BE 60                      pusha
   544 000004BF FF75F8                  push dword [ebp - 8]
   545 000004C2 E8(00000000)            call free
   546 000004C7 83C404                  add esp, 4
   547 000004CA 61                      popa
   548 000004CB 60                      pusha
   549 000004CC FF75F4                  push dword [ebp - 12]
   550 000004CF E8(00000000)            call free
   551 000004D4 83C404                  add esp, 4
   552 000004D7 61                      popa
   553 000004D8 89EC                    mov esp, ebp
   554 000004DA 5D                      pop ebp
   555 000004DB C3                      ret
   556                                  
   557                                  
   558                                  
   559                                  power:
   560 000004DC 55                      push ebp
   561 000004DD 89E5                    mov ebp, esp
   562 000004DF 83EC08                  sub esp, 8
   563 000004E2 6A01                    push 1
   564 000004E4 58                      pop eax
   565 000004E5 8945FC                  mov [ebp - 4], eax
   566 000004E8 FF7508                  push dword [ebp + 8]
   567 000004EB 6A00                    push 0
   568 000004ED 5B                      pop ebx
   569 000004EE 5A                      pop edx
   570 000004EF 39DA                    cmp edx, ebx
   571 000004F1 7707                    ja  L493
   572 000004F3 B800000000              mov eax, 0
   573 000004F8 EB05                    jmp L494
   574                                  L493:
   575 000004FA B801000000              mov eax, 1
   576                                  L494:
   577 000004FF 50                      push eax
   578 00000500 58                      pop eax
   579 00000501 83F801                  cmp eax, 1
   580 00000504 757B                    jne L487
   581                                  L488:
   582 00000506 FF7508                  push dword [ebp + 8]
   583 00000509 6A02                    push 2
   584 0000050B 5B                      pop ebx
   585 0000050C 58                      pop eax
   586 0000050D BA00000000              mov edx, 0
   587 00000512 F7FB                    idiv ebx
   588 00000514 89D0                    mov eax, edx
   589 00000516 50                      push eax
   590 00000517 6A01                    push 1
   591 00000519 5B                      pop ebx
   592 0000051A 5A                      pop edx
   593 0000051B 39DA                    cmp edx, ebx
   594 0000051D 7407                    je  L509
   595 0000051F B800000000              mov eax, 0
   596 00000524 EB05                    jmp L510
   597                                  L509:
   598 00000526 B801000000              mov eax, 1
   599                                  L510:
   600 0000052B 50                      push eax
   601 0000052C 58                      pop eax
   602 0000052D 83F801                  cmp eax, 1
   603 00000530 750F                    jne L501
   604 00000532 FF75FC                  push dword [ebp - 4]
   605 00000535 FF750C                  push dword [ebp + 12]
   606 00000538 5B                      pop ebx
   607 00000539 58                      pop eax
   608 0000053A F7EB                    imul ebx
   609 0000053C 50                      push eax
   610 0000053D 58                      pop eax
   611 0000053E 8945FC                  mov [ebp - 4], eax
   612                                  L501:
   613 00000541 FF750C                  push dword [ebp + 12]
   614 00000544 FF750C                  push dword [ebp + 12]
   615 00000547 5B                      pop ebx
   616 00000548 58                      pop eax
   617 00000549 F7EB                    imul ebx
   618 0000054B 50                      push eax
   619 0000054C 58                      pop eax
   620 0000054D 89450C                  mov [ebp + 12], eax
   621 00000550 FF7508                  push dword [ebp + 8]
   622 00000553 6A02                    push 2
   623 00000555 5B                      pop ebx
   624 00000556 58                      pop eax
   625 00000557 BA00000000              mov edx, 0
   626 0000055C F7FB                    idiv ebx
   627 0000055E 50                      push eax
   628 0000055F 58                      pop eax
   629 00000560 894508                  mov [ebp + 8], eax
   630 00000563 FF7508                  push dword [ebp + 8]
   631 00000566 6A00                    push 0
   632 00000568 5B                      pop ebx
   633 00000569 5A                      pop edx
   634 0000056A 39DA                    cmp edx, ebx
   635 0000056C 7707                    ja  L549
   636 0000056E B800000000              mov eax, 0
   637 00000573 EB05                    jmp L550
   638                                  L549:
   639 00000575 B801000000              mov eax, 1
   640                                  L550:
   641 0000057A 50                      push eax
   642 0000057B 58                      pop eax
   643 0000057C 83F801                  cmp eax, 1
   644 0000057F 7485                    je L488
   645                                  L487:
   646 00000581 FF75FC                  push dword [ebp - 4]
   647 00000584 58                      pop eax
   648 00000585 89EC                    mov esp, ebp
   649 00000587 5D                      pop ebp
   650 00000588 C20800                  ret 8
   651                                  
   652                                  
   653                                  
   654                                  section .data
   655 00000000 256400000A00000000-     int_format dd "%d", 10, 0
   656 00000009 000000             
   657 0000000C 257300000A00000000-     str_format dd "%s", 10, 0
   658 00000015 000000             
   659 00000018 00000000                globIntVar: dd 0
   660 0000001C 497420697320676C6F-     globStringVarWithInit: dd "It is global string", 0
   661 00000025 62616C20737472696E-
   662 0000002E 670000000000       
   663 00000034 00000000                globBoolVar: dd 0
   664 00000038 2000000000000000        tmp1: dd " ", 0
   665 00000040 2000000000000000        tmp2: dd " ", 0
   666 00000048 2000000000000000        tmp3: dd " ", 0
   667 00000050 2000000000000000        tmp4: dd " ", 0
   668 00000058 762E612E78203D2000-     tmp5: dd "v.a.x = ", 0
   669 00000061 000000             
   670 00000064 762E612E79203D2000-     tmp6: dd "v.a.y = ", 0
   671 0000006D 000000             
   672 00000070 762E622E78203D2000-     tmp7: dd "v.b.x = ", 0
   673 00000079 000000             
   674 0000007C 762E622E79203D2000-     tmp8: dd "v.b.y = ", 0
   675 00000085 000000             
   676 00000088 202020202000000000-     tmp9: dd "     ", 0
   677 00000091 000000             
   678                                  
   679                                  section .bss
   680 00000000 <res 00000008>          motherfucker: resb firstClass.size
