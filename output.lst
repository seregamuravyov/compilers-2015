     1                                  extern printf
     2                                  extern scanf
     3                                  
     4                                  extern strcmp
     5                                  extern strcat
     6                                  extern strcpy
     7                                  
     8                                  
     9                                  extern malloc
    10                                  extern memcpy
    11                                  extern free
    12                                  
    13                                  
    14                                  struc map
    15 00000000 <res 00000004>          .index RESD 1
    16 00000004 <res 00000004>          .value RESD 1
    17                                  .size:
    18                                  endstruc
    19                                  
    20                                  
    21                                  
    22                                  struc vecmap
    23 00000000 <res 00000008>          .x1 RESB map.size
    24 00000008 <res 00000008>          .x2 RESB map.size
    25                                  .size:
    26                                  endstruc
    27                                  
    28                                  
    29                                  
    30                                  struc firstClass
    31 00000000 <res 00000004>          .num RESD 1
    32 00000004 <res 00000004>          .flag RESD 1
    33                                  .size:
    34                                  endstruc
    35                                  
    36                                  
    37                                  
    38                                  struc secondClass
    39 00000000 <res 00000004>          .index RESD 1
    40 00000004 <res 00000008>          .fc RESB firstClass.size
    41                                  .size:
    42                                  endstruc
    43                                  
    44                                  
    45                                  
    46                                  struc point
    47 00000000 <res 00000004>          .x RESD 1
    48 00000004 <res 00000004>          .y RESD 1
    49                                  .size:
    50                                  endstruc
    51                                  
    52                                  
    53                                  
    54                                  struc vector
    55 00000000 <res 00000008>          .a RESB point.size
    56 00000008 <res 00000008>          .b RESB point.size
    57                                  .size:
    58                                  endstruc
    59                                  
    60                                  
    61                                  
    62                                  struc dvector
    63 00000000 <res 00000010>          .v1 RESB vector.size
    64 00000010 <res 00000010>          .v2 RESB vector.size
    65                                  .size:
    66                                  endstruc
    67                                  
    68                                  
    69                                  
    70                                  section .text
    71                                  global main
    72                                  
    73                                  glob_assign:
    74 00000000 55                      push ebp
    75 00000001 89E5                    mov ebp, esp
    76 00000003 60                      pusha
    77 00000004 6A08                    push 8
    78 00000006 E8(00000000)            call malloc
    79 0000000B 83C404                  add esp, 4
    80 0000000E A3[00000000]            mov [motherfucker], eax
    81 00000013 61                      popa
    82 00000014 6A00                    push 0
    83 00000016 58                      pop eax
    84 00000017 8B0D[00000000]          mov ecx, [motherfucker]
    85 0000001D 894104                  mov [ecx + firstClass.flag], eax
    86 00000020 68A00B0000              push 2976
    87 00000025 58                      pop eax
    88 00000026 8B0D[00000000]          mov ecx, [motherfucker]
    89 0000002C 8901                    mov [ecx + firstClass.num], eax
    90 0000002E 89EC                    mov esp, ebp
    91 00000030 5D                      pop ebp
    92 00000031 C3                      ret
    93                                  
    94                                  
    95                                  doNothing:
    96 00000032 55                      push ebp
    97 00000033 89E5                    mov ebp, esp
    98 00000035 83EC08                  sub esp, 8
    99 00000038 8B4D08                  mov ecx, [ebp + 8]
   100 0000003B FF31                    push dword [ecx + firstClass.num]
   101 0000003D 68[00000000]            push int_format
   102 00000042 E8(00000000)            call printf
   103 00000047 83C408                  add esp, 8
   104 0000004A 60                      pusha
   105 0000004B 6A08                    push 8
   106 0000004D E8(00000000)            call malloc
   107 00000052 83C404                  add esp, 4
   108 00000055 8945FC                  mov [ebp - 4], eax
   109 00000058 61                      popa
   110 00000059 FF7508                  push dword [ebp + 8]
   111 0000005C 58                      pop eax
   112 0000005D 8B4DFC                  mov ecx, [ebp - 4]
   113 00000060 8B10                    mov edx, [eax  + firstClass.num]
   114 00000062 8911                    mov [ecx  + firstClass.num], edx
   115 00000064 8B4DFC                  mov ecx, [ebp - 4]
   116 00000067 8B5004                  mov edx, [eax  + firstClass.flag]
   117 0000006A 895104                  mov [ecx  + firstClass.flag], edx
   118 0000006D 68D0050000              push 1488
   119 00000072 58                      pop eax
   120 00000073 8B4DFC                  mov ecx, [ebp - 4]
   121 00000076 8901                    mov [ecx + firstClass.num], eax
   122 00000078 8B4D08                  mov ecx, [ebp + 8]
   123 0000007B FF31                    push dword [ecx + firstClass.num]
   124 0000007D 68[00000000]            push int_format
   125 00000082 E8(00000000)            call printf
   126 00000087 83C408                  add esp, 8
   127 0000008A 8B4DFC                  mov ecx, [ebp - 4]
   128 0000008D FF31                    push dword [ecx + firstClass.num]
   129 0000008F 68[00000000]            push int_format
   130 00000094 E8(00000000)            call printf
   131 00000099 83C408                  add esp, 8
   132 0000009C 60                      pusha
   133 0000009D FF75FC                  push dword [ebp - 4]
   134 000000A0 E8(00000000)            call free
   135 000000A5 83C404                  add esp, 4
   136 000000A8 61                      popa
   137 000000A9 89EC                    mov esp, ebp
   138 000000AB 5D                      pop ebp
   139 000000AC C20400                  ret 4
   140                                  
   141                                  
   142                                  
   143                                  recurse:
   144 000000AF 55                      push ebp
   145 000000B0 89E5                    mov ebp, esp
   146 000000B2 83EC04                  sub esp, 4
   147 000000B5 FF7508                  push dword [ebp + 8]
   148 000000B8 6A14                    push 20
   149 000000BA 5B                      pop ebx
   150 000000BB 5A                      pop edx
   151 000000BC 39DA                    cmp edx, ebx
   152 000000BE 7207                    jb  L79
   153 000000C0 B800000000              mov eax, 0
   154 000000C5 EB05                    jmp L80
   155                                  L79:
   156 000000C7 B801000000              mov eax, 1
   157                                  L80:
   158 000000CC 50                      push eax
   159 000000CD 58                      pop eax
   160 000000CE 83F801                  cmp eax, 1
   161 000000D1 7516                    jne L73
   162 000000D3 FF7508                  push dword [ebp + 8]
   163 000000D6 6A01                    push 1
   164 000000D8 5B                      pop ebx
   165 000000D9 5A                      pop edx
   166 000000DA 01DA                    add edx, ebx
   167 000000DC 89D0                    mov eax, edx
   168 000000DE 50                      push eax
   169 000000DF E8CBFFFFFF              call recurse
   170 000000E4 50                      push eax
   171 000000E5 58                      pop eax
   172 000000E6 894508                  mov [ebp + 8], eax
   173                                  L73:
   174 000000E9 FF7508                  push dword [ebp + 8]
   175 000000EC 58                      pop eax
   176 000000ED 89EC                    mov esp, ebp
   177 000000EF 5D                      pop ebp
   178 000000F0 C20400                  ret 4
   179                                  
   180                                  
   181                                  
   182                                  getSqDistance:
   183 000000F3 55                      push ebp
   184 000000F4 89E5                    mov ebp, esp
   185 000000F6 83EC08                  sub esp, 8
   186 000000F9 8B4D08                  mov ecx, [ebp + 8]
   187 000000FC FF31                    push dword [ecx + vector.a + point.x]
   188 000000FE 8B4D08                  mov ecx, [ebp + 8]
   189 00000101 FF7108                  push dword [ecx + vector.b + point.x]
   190 00000104 5B                      pop ebx
   191 00000105 5A                      pop edx
   192 00000106 29DA                    sub edx, ebx
   193 00000108 89D0                    mov eax, edx
   194 0000010A 50                      push eax
   195 0000010B 8B4D08                  mov ecx, [ebp + 8]
   196 0000010E FF31                    push dword [ecx + vector.a + point.x]
   197 00000110 8B4D08                  mov ecx, [ebp + 8]
   198 00000113 FF7108                  push dword [ecx + vector.b + point.x]
   199 00000116 5B                      pop ebx
   200 00000117 5A                      pop edx
   201 00000118 29DA                    sub edx, ebx
   202 0000011A 89D0                    mov eax, edx
   203 0000011C 50                      push eax
   204 0000011D 5B                      pop ebx
   205 0000011E 58                      pop eax
   206 0000011F F7EB                    imul ebx
   207 00000121 50                      push eax
   208 00000122 8B4D08                  mov ecx, [ebp + 8]
   209 00000125 FF7104                  push dword [ecx + vector.a + point.y]
   210 00000128 8B4D08                  mov ecx, [ebp + 8]
   211 0000012B FF710C                  push dword [ecx + vector.b + point.y]
   212 0000012E 5B                      pop ebx
   213 0000012F 5A                      pop edx
   214 00000130 29DA                    sub edx, ebx
   215 00000132 89D0                    mov eax, edx
   216 00000134 50                      push eax
   217 00000135 8B4D08                  mov ecx, [ebp + 8]
   218 00000138 FF7104                  push dword [ecx + vector.a + point.y]
   219 0000013B 8B4D08                  mov ecx, [ebp + 8]
   220 0000013E FF710C                  push dword [ecx + vector.b + point.y]
   221 00000141 5B                      pop ebx
   222 00000142 5A                      pop edx
   223 00000143 29DA                    sub edx, ebx
   224 00000145 89D0                    mov eax, edx
   225 00000147 50                      push eax
   226 00000148 5B                      pop ebx
   227 00000149 58                      pop eax
   228 0000014A F7EB                    imul ebx
   229 0000014C 50                      push eax
   230 0000014D 5B                      pop ebx
   231 0000014E 5A                      pop edx
   232 0000014F 01DA                    add edx, ebx
   233 00000151 89D0                    mov eax, edx
   234 00000153 50                      push eax
   235 00000154 58                      pop eax
   236 00000155 8945FC                  mov [ebp - 4], eax
   237 00000158 FF75FC                  push dword [ebp - 4]
   238 0000015B 58                      pop eax
   239 0000015C 89EC                    mov esp, ebp
   240 0000015E 5D                      pop ebp
   241 0000015F C20400                  ret 4
   242                                  
   243                                  
   244                                  
   245                                  getBean:
   246 00000162 55                      push ebp
   247 00000163 89E5                    mov ebp, esp
   248 00000165 83EC0C                  sub esp, 12
   249 00000168 60                      pusha
   250 00000169 6A08                    push 8
   251 0000016B E8(00000000)            call malloc
   252 00000170 83C404                  add esp, 4
   253 00000173 8945FC                  mov [ebp - 4], eax
   254 00000176 61                      popa
   255 00000177 6A00                    push 0
   256 00000179 58                      pop eax
   257 0000017A 8B4DFC                  mov ecx, [ebp - 4]
   258 0000017D 894104                  mov [ecx + firstClass.flag], eax
   259 00000180 6A06                    push 6
   260 00000182 E828FFFFFF              call recurse
   261 00000187 50                      push eax
   262 00000188 58                      pop eax
   263 00000189 8B4DFC                  mov ecx, [ebp - 4]
   264 0000018C 8901                    mov [ecx + firstClass.num], eax
   265 0000018E 8B4DFC                  mov ecx, [ebp - 4]
   266 00000191 FF7104                  push dword [ecx + firstClass.flag]
   267 00000194 FF35[18000000]          push dword [globIntVar]
   268 0000019A 6A00                    push 0
   269 0000019C 5B                      pop ebx
   270 0000019D 5A                      pop edx
   271 0000019E 39DA                    cmp edx, ebx
   272 000001A0 7407                    je  L217
   273 000001A2 B800000000              mov eax, 0
   274 000001A7 EB05                    jmp L218
   275                                  L217:
   276 000001A9 B801000000              mov eax, 1
   277                                  L218:
   278 000001AE 50                      push eax
   279 000001AF 5B                      pop ebx
   280 000001B0 5A                      pop edx
   281 000001B1 83FA01                  cmp edx, 1
   282 000001B4 750C                    jne L205
   283 000001B6 83FB01                  cmp ebx, 1
   284 000001B9 7507                    jne L205
   285 000001BB B801000000              mov eax, 1
   286 000001C0 EB05                    jmp L206
   287                                  L205:
   288 000001C2 B800000000              mov eax, 0
   289                                  L206:
   290 000001C7 50                      push eax
   291 000001C8 58                      pop eax
   292 000001C9 8945F8                  mov [ebp - 8], eax
   293 000001CC FF75F8                  push dword [ebp - 8]
   294 000001CF 58                      pop eax
   295 000001D0 83F801                  cmp eax, 1
   296 000001D3 7515                    jne L229
   297 000001D5 8B4DFC                  mov ecx, [ebp - 4]
   298 000001D8 FF7104                  push dword [ecx + firstClass.flag]
   299 000001DB 68[00000000]            push int_format
   300 000001E0 E8(00000000)            call printf
   301 000001E5 83C408                  add esp, 8
   302 000001E8 EB12                    jmp L230
   303                                  L229:
   304 000001EA 8B4DFC                  mov ecx, [ebp - 4]
   305 000001ED FF31                    push dword [ecx + firstClass.num]
   306 000001EF 68[00000000]            push int_format
   307 000001F4 E8(00000000)            call printf
   308 000001F9 83C408                  add esp, 8
   309                                  L230:
   310 000001FC FF75FC                  push dword [ebp - 4]
   311 000001FF 6A08                    push 8
   312 00000201 E8(00000000)            call malloc
   313 00000206 83C404                  add esp, 4
   314 00000209 5B                      pop ebx
   315 0000020A 6A08                    push 8
   316 0000020C 53                      push ebx
   317 0000020D 50                      push eax
   318 0000020E E8(00000000)            call memcpy
   319 00000213 83C40C                  add esp, 12
   320 00000216 50                      push eax
   321 00000217 58                      pop eax
   322 00000218 60                      pusha
   323 00000219 FF75FC                  push dword [ebp - 4]
   324 0000021C E8(00000000)            call free
   325 00000221 83C404                  add esp, 4
   326 00000224 61                      popa
   327 00000225 89EC                    mov esp, ebp
   328 00000227 5D                      pop ebp
   329 00000228 C3                      ret
   330                                  
   331                                  
   332                                  
   333                                  strread:
   334 00000229 55                      push ebp
   335 0000022A 89E5                    mov ebp, esp
   336 0000022C 83EC08                  sub esp, 8
   337 0000022F 60                      pusha
   338 00000230 6800010000              push 256
   339 00000235 E8(00000000)            call malloc
   340 0000023A 83C404                  add esp, 4
   341 0000023D 8945FC                  mov [ebp - 4], eax
   342 00000240 FF75FC                  push dword [ebp - 4]
   343 00000243 68[0C000000]            push str_format
   344 00000248 E8(00000000)            call scanf
   345 0000024D 83C408                  add esp, 8
   346 00000250 61                      popa
   347 00000251 FF75FC                  push dword [ebp - 4]
   348 00000254 6800010000              push 256
   349 00000259 E8(00000000)            call malloc
   350 0000025E 83C404                  add esp, 4
   351 00000261 5B                      pop ebx
   352 00000262 53                      push ebx
   353 00000263 50                      push eax
   354 00000264 E8(00000000)            call strcpy
   355 00000269 83C408                  add esp, 8
   356 0000026C 50                      push eax
   357 0000026D 58                      pop eax
   358 0000026E 60                      pusha
   359 0000026F FF75FC                  push dword [ebp - 4]
   360 00000272 E8(00000000)            call free
   361 00000277 83C404                  add esp, 4
   362 0000027A 61                      popa
   363 0000027B 89EC                    mov esp, ebp
   364 0000027D 5D                      pop ebp
   365 0000027E C3                      ret
   366                                  
   367                                  
   368                                  
   369                                  main:
   370 0000027F 55                      push ebp
   371 00000280 89E5                    mov ebp, esp
   372 00000282 83EC20                  sub esp, 32
   373 00000285 60                      pusha
   374 00000286 E875FDFFFF              call glob_assign
   375 0000028B 61                      popa
   376 0000028C 60                      pusha
   377 0000028D 6A08                    push 8
   378 0000028F E8(00000000)            call malloc
   379 00000294 83C404                  add esp, 4
   380 00000297 8945FC                  mov [ebp - 4], eax
   381 0000029A 61                      popa
   382 0000029B E8C2FEFFFF              call getBean
   383 000002A0 50                      push eax
   384 000002A1 58                      pop eax
   385 000002A2 8B4DFC                  mov ecx, [ebp - 4]
   386 000002A5 8B10                    mov edx, [eax  + firstClass.num]
   387 000002A7 8911                    mov [ecx  + firstClass.num], edx
   388 000002A9 8B4DFC                  mov ecx, [ebp - 4]
   389 000002AC 8B5004                  mov edx, [eax  + firstClass.flag]
   390 000002AF 895104                  mov [ecx  + firstClass.flag], edx
   391 000002B2 60                      pusha
   392 000002B3 6A0C                    push 12
   393 000002B5 E8(00000000)            call malloc
   394 000002BA 83C404                  add esp, 4
   395 000002BD 8945F8                  mov [ebp - 8], eax
   396 000002C0 61                      popa
   397 000002C1 E89CFEFFFF              call getBean
   398 000002C6 50                      push eax
   399 000002C7 58                      pop eax
   400 000002C8 8B4DF8                  mov ecx, [ebp - 8]
   401 000002CB 8B10                    mov edx, [eax  + firstClass.num]
   402 000002CD 895104                  mov [ecx + secondClass.fc + firstClass.num], edx
   403 000002D0 8B4DF8                  mov ecx, [ebp - 8]
   404 000002D3 8B5004                  mov edx, [eax  + firstClass.flag]
   405 000002D6 895108                  mov [ecx + secondClass.fc + firstClass.flag], edx
   406 000002D9 6A0A                    push 10
   407 000002DB 58                      pop eax
   408 000002DC 8B4DF8                  mov ecx, [ebp - 8]
   409 000002DF 8901                    mov [ecx + secondClass.index], eax
   410 000002E1 68[64000000]            push tmp311
   411 000002E6 68[0C000000]            push str_format
   412 000002EB E8(00000000)            call printf
   413 000002F0 83C408                  add esp, 8
   414 000002F3 6A06                    push 6
   415 000002F5 58                      pop eax
   416 000002F6 8945F4                  mov [ebp - 12], eax
   417 000002F9 60                      pusha
   418 000002FA 6A08                    push 8
   419 000002FC E8(00000000)            call malloc
   420 00000301 83C404                  add esp, 4
   421 00000304 8945F0                  mov [ebp - 16], eax
   422 00000307 61                      popa
   423 00000308 6A00                    push 0
   424 0000030A 58                      pop eax
   425 0000030B 8B4DF0                  mov ecx, [ebp - 16]
   426 0000030E 894104                  mov [ecx + point.y], eax
   427 00000311 6A00                    push 0
   428 00000313 58                      pop eax
   429 00000314 8B4DF0                  mov ecx, [ebp - 16]
   430 00000317 8901                    mov [ecx + point.x], eax
   431 00000319 60                      pusha
   432 0000031A 6A08                    push 8
   433 0000031C E8(00000000)            call malloc
   434 00000321 83C404                  add esp, 4
   435 00000324 8945EC                  mov [ebp - 20], eax
   436 00000327 61                      popa
   437 00000328 6A04                    push 4
   438 0000032A 58                      pop eax
   439 0000032B 8B4DEC                  mov ecx, [ebp - 20]
   440 0000032E 894104                  mov [ecx + point.y], eax
   441 00000331 6A03                    push 3
   442 00000333 58                      pop eax
   443 00000334 8B4DEC                  mov ecx, [ebp - 20]
   444 00000337 8901                    mov [ecx + point.x], eax
   445 00000339 60                      pusha
   446 0000033A 6A10                    push 16
   447 0000033C E8(00000000)            call malloc
   448 00000341 83C404                  add esp, 4
   449 00000344 8945E4                  mov [ebp - 28], eax
   450 00000347 61                      popa
   451 00000348 FF75F0                  push dword [ebp - 16]
   452 0000034B 58                      pop eax
   453 0000034C 8B4DE4                  mov ecx, [ebp - 28]
   454 0000034F 8B10                    mov edx, [eax  + point.x]
   455 00000351 895108                  mov [ecx + vector.b + point.x], edx
   456 00000354 8B4DE4                  mov ecx, [ebp - 28]
   457 00000357 8B5004                  mov edx, [eax  + point.y]
   458 0000035A 89510C                  mov [ecx + vector.b + point.y], edx
   459 0000035D FF75EC                  push dword [ebp - 20]
   460 00000360 58                      pop eax
   461 00000361 8B4DE4                  mov ecx, [ebp - 28]
   462 00000364 8B10                    mov edx, [eax  + point.x]
   463 00000366 8911                    mov [ecx + vector.a + point.x], edx
   464 00000368 8B4DE4                  mov ecx, [ebp - 28]
   465 0000036B 8B5004                  mov edx, [eax  + point.y]
   466 0000036E 895104                  mov [ecx + vector.a + point.y], edx
   467 00000371 60                      pusha
   468 00000372 6A08                    push 8
   469 00000374 E8(00000000)            call malloc
   470 00000379 83C404                  add esp, 4
   471 0000037C 8945E8                  mov [ebp - 24], eax
   472 0000037F 61                      popa
   473 00000380 8B4DE4                  mov ecx, [ebp - 28]
   474 00000383 51                      push ecx
   475 00000384 58                      pop eax
   476 00000385 8B4DE8                  mov ecx, [ebp - 24]
   477 00000388 8B10                    mov edx, [eax  + vector.a + point.x]
   478 0000038A 8911                    mov [ecx  + point.x], edx
   479 0000038C 8B4DE8                  mov ecx, [ebp - 24]
   480 0000038F 8B5004                  mov edx, [eax  + vector.a + point.y]
   481 00000392 895104                  mov [ecx  + point.y], edx
   482 00000395 FF75E8                  push dword [ebp - 24]
   483 00000398 58                      pop eax
   484 00000399 8B4DE4                  mov ecx, [ebp - 28]
   485 0000039C 8B10                    mov edx, [eax  + point.x]
   486 0000039E 895108                  mov [ecx + vector.b + point.x], edx
   487 000003A1 8B4DE4                  mov ecx, [ebp - 28]
   488 000003A4 8B5004                  mov edx, [eax  + point.y]
   489 000003A7 89510C                  mov [ecx + vector.b + point.y], edx
   490 000003AA 6A00                    push 0
   491 000003AC 58                      pop eax
   492 000003AD 60                      pusha
   493 000003AE FF75F8                  push dword [ebp - 8]
   494 000003B1 E8(00000000)            call free
   495 000003B6 83C404                  add esp, 4
   496 000003B9 61                      popa
   497 000003BA 60                      pusha
   498 000003BB FF75FC                  push dword [ebp - 4]
   499 000003BE E8(00000000)            call free
   500 000003C3 83C404                  add esp, 4
   501 000003C6 61                      popa
   502 000003C7 60                      pusha
   503 000003C8 FF75E4                  push dword [ebp - 28]
   504 000003CB E8(00000000)            call free
   505 000003D0 83C404                  add esp, 4
   506 000003D3 61                      popa
   507 000003D4 60                      pusha
   508 000003D5 FF75F0                  push dword [ebp - 16]
   509 000003D8 E8(00000000)            call free
   510 000003DD 83C404                  add esp, 4
   511 000003E0 61                      popa
   512 000003E1 60                      pusha
   513 000003E2 FF75EC                  push dword [ebp - 20]
   514 000003E5 E8(00000000)            call free
   515 000003EA 83C404                  add esp, 4
   516 000003ED 61                      popa
   517 000003EE 60                      pusha
   518 000003EF FF75E8                  push dword [ebp - 24]
   519 000003F2 E8(00000000)            call free
   520 000003F7 83C404                  add esp, 4
   521 000003FA 61                      popa
   522 000003FB 89EC                    mov esp, ebp
   523 000003FD 5D                      pop ebp
   524 000003FE C3                      ret
   525                                  
   526                                  
   527                                  
   528                                  power:
   529 000003FF 55                      push ebp
   530 00000400 89E5                    mov ebp, esp
   531 00000402 83EC08                  sub esp, 8
   532 00000405 6A01                    push 1
   533 00000407 58                      pop eax
   534 00000408 8945FC                  mov [ebp - 4], eax
   535 0000040B FF7508                  push dword [ebp + 8]
   536 0000040E 6A00                    push 0
   537 00000410 5B                      pop ebx
   538 00000411 5A                      pop edx
   539 00000412 39DA                    cmp edx, ebx
   540 00000414 7707                    ja  L425
   541 00000416 B800000000              mov eax, 0
   542 0000041B EB05                    jmp L426
   543                                  L425:
   544 0000041D B801000000              mov eax, 1
   545                                  L426:
   546 00000422 50                      push eax
   547 00000423 58                      pop eax
   548 00000424 83F801                  cmp eax, 1
   549 00000427 757B                    jne L419
   550                                  L420:
   551 00000429 FF7508                  push dword [ebp + 8]
   552 0000042C 6A02                    push 2
   553 0000042E 5B                      pop ebx
   554 0000042F 58                      pop eax
   555 00000430 BA00000000              mov edx, 0
   556 00000435 F7FB                    idiv ebx
   557 00000437 89D0                    mov eax, edx
   558 00000439 50                      push eax
   559 0000043A 6A01                    push 1
   560 0000043C 5B                      pop ebx
   561 0000043D 5A                      pop edx
   562 0000043E 39DA                    cmp edx, ebx
   563 00000440 7407                    je  L441
   564 00000442 B800000000              mov eax, 0
   565 00000447 EB05                    jmp L442
   566                                  L441:
   567 00000449 B801000000              mov eax, 1
   568                                  L442:
   569 0000044E 50                      push eax
   570 0000044F 58                      pop eax
   571 00000450 83F801                  cmp eax, 1
   572 00000453 750F                    jne L433
   573 00000455 FF75FC                  push dword [ebp - 4]
   574 00000458 FF750C                  push dword [ebp + 12]
   575 0000045B 5B                      pop ebx
   576 0000045C 58                      pop eax
   577 0000045D F7EB                    imul ebx
   578 0000045F 50                      push eax
   579 00000460 58                      pop eax
   580 00000461 8945FC                  mov [ebp - 4], eax
   581                                  L433:
   582 00000464 FF750C                  push dword [ebp + 12]
   583 00000467 FF750C                  push dword [ebp + 12]
   584 0000046A 5B                      pop ebx
   585 0000046B 58                      pop eax
   586 0000046C F7EB                    imul ebx
   587 0000046E 50                      push eax
   588 0000046F 58                      pop eax
   589 00000470 89450C                  mov [ebp + 12], eax
   590 00000473 FF7508                  push dword [ebp + 8]
   591 00000476 6A02                    push 2
   592 00000478 5B                      pop ebx
   593 00000479 58                      pop eax
   594 0000047A BA00000000              mov edx, 0
   595 0000047F F7FB                    idiv ebx
   596 00000481 50                      push eax
   597 00000482 58                      pop eax
   598 00000483 894508                  mov [ebp + 8], eax
   599 00000486 FF7508                  push dword [ebp + 8]
   600 00000489 6A00                    push 0
   601 0000048B 5B                      pop ebx
   602 0000048C 5A                      pop edx
   603 0000048D 39DA                    cmp edx, ebx
   604 0000048F 7707                    ja  L481
   605 00000491 B800000000              mov eax, 0
   606 00000496 EB05                    jmp L482
   607                                  L481:
   608 00000498 B801000000              mov eax, 1
   609                                  L482:
   610 0000049D 50                      push eax
   611 0000049E 58                      pop eax
   612 0000049F 83F801                  cmp eax, 1
   613 000004A2 7485                    je L420
   614                                  L419:
   615 000004A4 FF75FC                  push dword [ebp - 4]
   616 000004A7 58                      pop eax
   617 000004A8 89EC                    mov esp, ebp
   618 000004AA 5D                      pop ebp
   619 000004AB C20800                  ret 8
   620                                  
   621                                  
   622                                  
   623                                  section .data
   624 00000000 256400000A00000000-     int_format dd "%d", 10, 0
   625 00000009 000000             
   626 0000000C 257300000A00000000-     str_format dd "%s", 10, 0
   627 00000015 000000             
   628 00000018 00000000                globIntVar: dd 0
   629 0000001C 497420697320676C6F-     globStringVarWithInit: dd "It is global string", 0
   630 00000025 62616C20737472696E-
   631 0000002E 670000000000       
   632 00000034 00000000                globBoolVar: dd 0
   633 00000038 68656C6C6F2C200000-     tmp1: dd "hello, ", 0
   634 00000041 000000             
   635 00000044 676F6464616D6E2000-     tmp2: dd "goddamn ", 0
   636 0000004D 000000             
   637 00000050 6D6F74686572667563-     tmp3: dd "motherfuckers!", 0
   638 00000059 6B6572732100000000-
   639 00000062 0000               
   640 00000064 68656C6C6F2C20676F-     tmp311: dd "hello, goddamn motherfuckers!", 0
   641 0000006D 6464616D6E206D6F74-
   642 00000076 6865726675636B6572-
   643 0000007F 732100000000000000 
   644                                  
   645                                  section .bss
   646 00000000 <res 00000008>          motherfucker: resb firstClass.size
