     1                                  extern printf
     2                                  extern scanf
     3                                  
     4                                  extern strcmp
     5                                  extern strcat
     6                                  extern strcpy
     7                                  
     8                                  
     9                                  extern malloc
    10                                  extern memcpy
    11                                  extern free
    12                                  
    13                                  
    14                                  struc map
    15 00000000 <res 00000004>          .index RESD 1
    16 00000004 <res 00000004>          .value RESD 1
    17                                  .size:
    18                                  endstruc
    19                                  
    20                                  
    21                                  
    22                                  struc vecmap
    23 00000000 <res 00000008>          .x1 RESB map.size
    24 00000008 <res 00000008>          .x2 RESB map.size
    25                                  .size:
    26                                  endstruc
    27                                  
    28                                  
    29                                  
    30                                  struc firstClass
    31 00000000 <res 00000004>          .num RESD 1
    32 00000004 <res 00000004>          .flag RESD 1
    33                                  .size:
    34                                  endstruc
    35                                  
    36                                  
    37                                  
    38                                  struc point
    39 00000000 <res 00000004>          .x RESD 1
    40 00000004 <res 00000004>          .y RESD 1
    41                                  .size:
    42                                  endstruc
    43                                  
    44                                  
    45                                  
    46                                  struc vector
    47 00000000 <res 00000008>          .a RESB point.size
    48 00000008 <res 00000008>          .b RESB point.size
    49                                  .size:
    50                                  endstruc
    51                                  
    52                                  
    53                                  
    54                                  struc dvector
    55 00000000 <res 00000010>          .v1 RESB vector.size
    56 00000010 <res 00000010>          .v2 RESB vector.size
    57                                  .size:
    58                                  endstruc
    59                                  
    60                                  
    61                                  
    62                                  section .text
    63                                  global main
    64                                  
    65                                  glob_assign:
    66 00000000 55                      push ebp
    67 00000001 89E5                    mov ebp, esp
    68 00000003 60                      pusha
    69 00000004 6A08                    push 8
    70 00000006 E8(00000000)            call malloc
    71 0000000B 83C404                  add esp, 4
    72 0000000E A3[00000000]            mov [motherfucker], eax
    73 00000013 61                      popa
    74 00000014 FF35[34000000]          push dword [globBoolVar]
    75 0000001A 58                      pop eax
    76 0000001B 8B0D[00000000]          mov ecx, [motherfucker]
    77 00000021 894104                  mov [ecx + firstClass.flag], eax
    78 00000024 FF35[18000000]          push dword [globIntVar]
    79 0000002A 58                      pop eax
    80 0000002B 8B0D[00000000]          mov ecx, [motherfucker]
    81 00000031 8901                    mov [ecx + firstClass.num], eax
    82 00000033 89EC                    mov esp, ebp
    83 00000035 5D                      pop ebp
    84 00000036 C3                      ret
    85                                  
    86                                  
    87                                  doNothing:
    88 00000037 55                      push ebp
    89 00000038 89E5                    mov ebp, esp
    90 0000003A 83EC08                  sub esp, 8
    91 0000003D 8B4D08                  mov ecx, [ebp + 8]
    92 00000040 FF31                    push dword [ecx + firstClass.num]
    93 00000042 68[00000000]            push int_format
    94 00000047 E8(00000000)            call printf
    95 0000004C 83C408                  add esp, 8
    96 0000004F 60                      pusha
    97 00000050 6A08                    push 8
    98 00000052 E8(00000000)            call malloc
    99 00000057 83C404                  add esp, 4
   100 0000005A 8945FC                  mov [ebp - 4], eax
   101 0000005D 61                      popa
   102 0000005E FF7508                  push dword [ebp + 8]
   103 00000061 58                      pop eax
   104 00000062 8B4DFC                  mov ecx, [ebp - 4]
   105 00000065 8B10                    mov edx, [eax  + firstClass.num]
   106 00000067 8911                    mov [ecx  + firstClass.num], edx
   107 00000069 8B4DFC                  mov ecx, [ebp - 4]
   108 0000006C 8B5004                  mov edx, [eax  + firstClass.flag]
   109 0000006F 895104                  mov [ecx  + firstClass.flag], edx
   110 00000072 68D0050000              push 1488
   111 00000077 58                      pop eax
   112 00000078 8B4DFC                  mov ecx, [ebp - 4]
   113 0000007B 8901                    mov [ecx + firstClass.num], eax
   114 0000007D 8B4D08                  mov ecx, [ebp + 8]
   115 00000080 FF31                    push dword [ecx + firstClass.num]
   116 00000082 68[00000000]            push int_format
   117 00000087 E8(00000000)            call printf
   118 0000008C 83C408                  add esp, 8
   119 0000008F 8B4DFC                  mov ecx, [ebp - 4]
   120 00000092 FF31                    push dword [ecx + firstClass.num]
   121 00000094 68[00000000]            push int_format
   122 00000099 E8(00000000)            call printf
   123 0000009E 83C408                  add esp, 8
   124 000000A1 60                      pusha
   125 000000A2 FF75FC                  push dword [ebp - 4]
   126 000000A5 E8(00000000)            call free
   127 000000AA 83C404                  add esp, 4
   128 000000AD 61                      popa
   129 000000AE 89EC                    mov esp, ebp
   130 000000B0 5D                      pop ebp
   131 000000B1 C20400                  ret 4
   132                                  
   133                                  
   134                                  
   135                                  recurse:
   136 000000B4 55                      push ebp
   137 000000B5 89E5                    mov ebp, esp
   138 000000B7 83EC04                  sub esp, 4
   139 000000BA FF7508                  push dword [ebp + 8]
   140 000000BD 6A14                    push 20
   141 000000BF 5B                      pop ebx
   142 000000C0 5A                      pop edx
   143 000000C1 39DA                    cmp edx, ebx
   144 000000C3 7207                    jb  L75
   145 000000C5 B800000000              mov eax, 0
   146 000000CA EB05                    jmp L76
   147                                  L75:
   148 000000CC B801000000              mov eax, 1
   149                                  L76:
   150 000000D1 50                      push eax
   151 000000D2 58                      pop eax
   152 000000D3 83F801                  cmp eax, 1
   153 000000D6 7516                    jne L69
   154 000000D8 FF7508                  push dword [ebp + 8]
   155 000000DB 6A01                    push 1
   156 000000DD 5B                      pop ebx
   157 000000DE 5A                      pop edx
   158 000000DF 01DA                    add edx, ebx
   159 000000E1 89D0                    mov eax, edx
   160 000000E3 50                      push eax
   161 000000E4 E8CBFFFFFF              call recurse
   162 000000E9 50                      push eax
   163 000000EA 58                      pop eax
   164 000000EB 894508                  mov [ebp + 8], eax
   165                                  L69:
   166 000000EE FF7508                  push dword [ebp + 8]
   167 000000F1 58                      pop eax
   168 000000F2 89EC                    mov esp, ebp
   169 000000F4 5D                      pop ebp
   170 000000F5 C20400                  ret 4
   171                                  
   172                                  
   173                                  
   174                                  getSqDistance:
   175 000000F8 55                      push ebp
   176 000000F9 89E5                    mov ebp, esp
   177 000000FB 83EC08                  sub esp, 8
   178 000000FE 8B4D08                  mov ecx, [ebp + 8]
   179 00000101 FF31                    push dword [ecx + vector.a + point.x]
   180 00000103 8B4D08                  mov ecx, [ebp + 8]
   181 00000106 FF7108                  push dword [ecx + vector.b + point.x]
   182 00000109 5B                      pop ebx
   183 0000010A 5A                      pop edx
   184 0000010B 29DA                    sub edx, ebx
   185 0000010D 89D0                    mov eax, edx
   186 0000010F 50                      push eax
   187 00000110 8B4D08                  mov ecx, [ebp + 8]
   188 00000113 FF31                    push dword [ecx + vector.a + point.x]
   189 00000115 8B4D08                  mov ecx, [ebp + 8]
   190 00000118 FF7108                  push dword [ecx + vector.b + point.x]
   191 0000011B 5B                      pop ebx
   192 0000011C 5A                      pop edx
   193 0000011D 29DA                    sub edx, ebx
   194 0000011F 89D0                    mov eax, edx
   195 00000121 50                      push eax
   196 00000122 5B                      pop ebx
   197 00000123 58                      pop eax
   198 00000124 F7EB                    imul ebx
   199 00000126 50                      push eax
   200 00000127 8B4D08                  mov ecx, [ebp + 8]
   201 0000012A FF7104                  push dword [ecx + vector.a + point.y]
   202 0000012D 8B4D08                  mov ecx, [ebp + 8]
   203 00000130 FF710C                  push dword [ecx + vector.b + point.y]
   204 00000133 5B                      pop ebx
   205 00000134 5A                      pop edx
   206 00000135 29DA                    sub edx, ebx
   207 00000137 89D0                    mov eax, edx
   208 00000139 50                      push eax
   209 0000013A 8B4D08                  mov ecx, [ebp + 8]
   210 0000013D FF7104                  push dword [ecx + vector.a + point.y]
   211 00000140 8B4D08                  mov ecx, [ebp + 8]
   212 00000143 FF710C                  push dword [ecx + vector.b + point.y]
   213 00000146 5B                      pop ebx
   214 00000147 5A                      pop edx
   215 00000148 29DA                    sub edx, ebx
   216 0000014A 89D0                    mov eax, edx
   217 0000014C 50                      push eax
   218 0000014D 5B                      pop ebx
   219 0000014E 58                      pop eax
   220 0000014F F7EB                    imul ebx
   221 00000151 50                      push eax
   222 00000152 5B                      pop ebx
   223 00000153 5A                      pop edx
   224 00000154 01DA                    add edx, ebx
   225 00000156 89D0                    mov eax, edx
   226 00000158 50                      push eax
   227 00000159 58                      pop eax
   228 0000015A 8945FC                  mov [ebp - 4], eax
   229 0000015D FF75FC                  push dword [ebp - 4]
   230 00000160 58                      pop eax
   231 00000161 89EC                    mov esp, ebp
   232 00000163 5D                      pop ebp
   233 00000164 C20400                  ret 4
   234                                  
   235                                  
   236                                  
   237                                  getBean:
   238 00000167 55                      push ebp
   239 00000168 89E5                    mov ebp, esp
   240 0000016A 83EC0C                  sub esp, 12
   241 0000016D 60                      pusha
   242 0000016E 6A08                    push 8
   243 00000170 E8(00000000)            call malloc
   244 00000175 83C404                  add esp, 4
   245 00000178 8945FC                  mov [ebp - 4], eax
   246 0000017B 61                      popa
   247 0000017C 6A00                    push 0
   248 0000017E 58                      pop eax
   249 0000017F 8B4DFC                  mov ecx, [ebp - 4]
   250 00000182 894104                  mov [ecx + firstClass.flag], eax
   251 00000185 6A06                    push 6
   252 00000187 58                      pop eax
   253 00000188 8B4DFC                  mov ecx, [ebp - 4]
   254 0000018B 8901                    mov [ecx + firstClass.num], eax
   255 0000018D 8B4DFC                  mov ecx, [ebp - 4]
   256 00000190 FF7104                  push dword [ecx + firstClass.flag]
   257 00000193 FF35[18000000]          push dword [globIntVar]
   258 00000199 6A00                    push 0
   259 0000019B 5B                      pop ebx
   260 0000019C 5A                      pop edx
   261 0000019D 39DA                    cmp edx, ebx
   262 0000019F 7407                    je  L197
   263 000001A1 B800000000              mov eax, 0
   264 000001A6 EB05                    jmp L198
   265                                  L197:
   266 000001A8 B801000000              mov eax, 1
   267                                  L198:
   268 000001AD 50                      push eax
   269 000001AE 5B                      pop ebx
   270 000001AF 5A                      pop edx
   271 000001B0 83FA01                  cmp edx, 1
   272 000001B3 750C                    jne L185
   273 000001B5 83FB01                  cmp ebx, 1
   274 000001B8 7507                    jne L185
   275 000001BA B801000000              mov eax, 1
   276 000001BF EB05                    jmp L186
   277                                  L185:
   278 000001C1 B800000000              mov eax, 0
   279                                  L186:
   280 000001C6 50                      push eax
   281 000001C7 58                      pop eax
   282 000001C8 8945F8                  mov [ebp - 8], eax
   283 000001CB FF75F8                  push dword [ebp - 8]
   284 000001CE 58                      pop eax
   285 000001CF 83F801                  cmp eax, 1
   286 000001D2 7515                    jne L209
   287 000001D4 8B4DFC                  mov ecx, [ebp - 4]
   288 000001D7 FF7104                  push dword [ecx + firstClass.flag]
   289 000001DA 68[00000000]            push int_format
   290 000001DF E8(00000000)            call printf
   291 000001E4 83C408                  add esp, 8
   292 000001E7 EB12                    jmp L210
   293                                  L209:
   294 000001E9 8B4DFC                  mov ecx, [ebp - 4]
   295 000001EC FF31                    push dword [ecx + firstClass.num]
   296 000001EE 68[00000000]            push int_format
   297 000001F3 E8(00000000)            call printf
   298 000001F8 83C408                  add esp, 8
   299                                  L210:
   300 000001FB FF75FC                  push dword [ebp - 4]
   301 000001FE 6A08                    push 8
   302 00000200 E8(00000000)            call malloc
   303 00000205 83C404                  add esp, 4
   304 00000208 5B                      pop ebx
   305 00000209 6A08                    push 8
   306 0000020B 53                      push ebx
   307 0000020C 50                      push eax
   308 0000020D E8(00000000)            call memcpy
   309 00000212 83C40C                  add esp, 12
   310 00000215 50                      push eax
   311 00000216 58                      pop eax
   312 00000217 60                      pusha
   313 00000218 FF75FC                  push dword [ebp - 4]
   314 0000021B E8(00000000)            call free
   315 00000220 83C404                  add esp, 4
   316 00000223 61                      popa
   317 00000224 89EC                    mov esp, ebp
   318 00000226 5D                      pop ebp
   319 00000227 C3                      ret
   320                                  
   321                                  
   322                                  
   323                                  strread:
   324 00000228 55                      push ebp
   325 00000229 89E5                    mov ebp, esp
   326 0000022B 83EC08                  sub esp, 8
   327 0000022E 60                      pusha
   328 0000022F 6800010000              push 256
   329 00000234 E8(00000000)            call malloc
   330 00000239 83C404                  add esp, 4
   331 0000023C 8945FC                  mov [ebp - 4], eax
   332 0000023F FF75FC                  push dword [ebp - 4]
   333 00000242 68[0C000000]            push str_format
   334 00000247 E8(00000000)            call scanf
   335 0000024C 83C408                  add esp, 8
   336 0000024F 61                      popa
   337 00000250 FF75FC                  push dword [ebp - 4]
   338 00000253 6800010000              push 256
   339 00000258 E8(00000000)            call malloc
   340 0000025D 83C404                  add esp, 4
   341 00000260 5B                      pop ebx
   342 00000261 53                      push ebx
   343 00000262 50                      push eax
   344 00000263 E8(00000000)            call strcpy
   345 00000268 83C408                  add esp, 8
   346 0000026B 50                      push eax
   347 0000026C 58                      pop eax
   348 0000026D 60                      pusha
   349 0000026E FF75FC                  push dword [ebp - 4]
   350 00000271 E8(00000000)            call free
   351 00000276 83C404                  add esp, 4
   352 00000279 61                      popa
   353 0000027A 89EC                    mov esp, ebp
   354 0000027C 5D                      pop ebp
   355 0000027D C3                      ret
   356                                  
   357                                  
   358                                  
   359                                  main:
   360 0000027E 55                      push ebp
   361 0000027F 89E5                    mov ebp, esp
   362 00000281 83EC28                  sub esp, 40
   363 00000284 60                      pusha
   364 00000285 E876FDFFFF              call glob_assign
   365 0000028A 61                      popa
   366 0000028B 60                      pusha
   367 0000028C 6A08                    push 8
   368 0000028E E8(00000000)            call malloc
   369 00000293 83C404                  add esp, 4
   370 00000296 8945FC                  mov [ebp - 4], eax
   371 00000299 61                      popa
   372 0000029A 68[38000000]            push tmp1
   373 0000029F 58                      pop eax
   374 000002A0 50                      push eax
   375 000002A1 6800010000              push 256
   376 000002A6 E8(00000000)            call malloc
   377 000002AB 83C404                  add esp, 4
   378 000002AE 89C2                    mov edx, eax
   379 000002B0 58                      pop eax
   380 000002B1 50                      push eax
   381 000002B2 52                      push edx
   382 000002B3 E8(00000000)            call strcpy
   383 000002B8 83C408                  add esp, 8
   384 000002BB 8B4DFC                  mov ecx, [ebp - 4]
   385 000002BE 895104                  mov [ecx +map.value], edx
   386 000002C1 60                      pusha
   387 000002C2 50                      push eax
   388 000002C3 52                      push edx
   389 000002C4 E8(00000000)            call strcpy
   390 000002C9 83C408                  add esp, 8
   391 000002CC 61                      popa
   392 000002CD 689A020000              push 666
   393 000002D2 58                      pop eax
   394 000002D3 8B4DFC                  mov ecx, [ebp - 4]
   395 000002D6 8901                    mov [ecx + map.index], eax
   396 000002D8 8B4DFC                  mov ecx, [ebp - 4]
   397 000002DB FF31                    push dword [ecx + map.index]
   398 000002DD 68[00000000]            push int_format
   399 000002E2 E8(00000000)            call printf
   400 000002E7 83C408                  add esp, 8
   401 000002EA 68[44000000]            push tmp2
   402 000002EF 68[0C000000]            push str_format
   403 000002F4 E8(00000000)            call printf
   404 000002F9 83C408                  add esp, 8
   405 000002FC 8B4DFC                  mov ecx, [ebp - 4]
   406 000002FF FF7104                  push dword [ecx + map.value]
   407 00000302 68[0C000000]            push str_format
   408 00000307 E8(00000000)            call printf
   409 0000030C 83C408                  add esp, 8
   410 0000030F 68[4C000000]            push tmp3
   411 00000314 68[0C000000]            push str_format
   412 00000319 E8(00000000)            call printf
   413 0000031E 83C408                  add esp, 8
   414 00000321 60                      pusha
   415 00000322 6A08                    push 8
   416 00000324 E8(00000000)            call malloc
   417 00000329 83C404                  add esp, 4
   418 0000032C 8945F8                  mov [ebp - 8], eax
   419 0000032F 61                      popa
   420 00000330 FF75FC                  push dword [ebp - 4]
   421 00000333 58                      pop eax
   422 00000334 8B4DF8                  mov ecx, [ebp - 8]
   423 00000337 8B10                    mov edx, [eax  + map.index]
   424 00000339 8911                    mov [ecx  + map.index], edx
   425 0000033B 50                      push eax
   426 0000033C 6800010000              push 256
   427 00000341 E8(00000000)            call malloc
   428 00000346 83C404                  add esp, 4
   429 00000349 89C3                    mov ebx, eax
   430 0000034B 58                      pop eax
   431 0000034C 8B4DF8                  mov ecx, [ebp - 8]
   432 0000034F 8B5004                  mov edx, [eax  + map.value]
   433 00000352 895904                  mov [ecx  + map.value], ebx
   434 00000355 60                      pusha
   435 00000356 52                      push edx
   436 00000357 53                      push ebx
   437 00000358 E8(00000000)            call strcpy
   438 0000035D 83C408                  add esp, 8
   439 00000360 61                      popa
   440 00000361 8B4DF8                  mov ecx, [ebp - 8]
   441 00000364 FF31                    push dword [ecx + map.index]
   442 00000366 68[00000000]            push int_format
   443 0000036B E8(00000000)            call printf
   444 00000370 83C408                  add esp, 8
   445 00000373 68[54000000]            push tmp4
   446 00000378 68[0C000000]            push str_format
   447 0000037D E8(00000000)            call printf
   448 00000382 83C408                  add esp, 8
   449 00000385 8B4DF8                  mov ecx, [ebp - 8]
   450 00000388 FF7104                  push dword [ecx + map.value]
   451 0000038B 68[0C000000]            push str_format
   452 00000390 E8(00000000)            call printf
   453 00000395 83C408                  add esp, 8
   454 00000398 68[5C000000]            push tmp5
   455 0000039D 68[0C000000]            push str_format
   456 000003A2 E8(00000000)            call printf
   457 000003A7 83C408                  add esp, 8
   458 000003AA 68[64000000]            push tmp6
   459 000003AF 58                      pop eax
   460 000003B0 8B4DFC                  mov ecx, [ebp - 4]
   461 000003B3 60                      pusha
   462 000003B4 50                      push eax
   463 000003B5 FF7104                  push dword [ecx + map.value]
   464 000003B8 E8(00000000)            call strcpy
   465 000003BD 83C408                  add esp, 8
   466 000003C0 61                      popa
   467 000003C1 689B020000              push 667
   468 000003C6 58                      pop eax
   469 000003C7 8B4DFC                  mov ecx, [ebp - 4]
   470 000003CA 8901                    mov [ecx + map.index], eax
   471 000003CC 8B4DFC                  mov ecx, [ebp - 4]
   472 000003CF FF31                    push dword [ecx + map.index]
   473 000003D1 68[00000000]            push int_format
   474 000003D6 E8(00000000)            call printf
   475 000003DB 83C408                  add esp, 8
   476 000003DE 68[70000000]            push tmp7
   477 000003E3 68[0C000000]            push str_format
   478 000003E8 E8(00000000)            call printf
   479 000003ED 83C408                  add esp, 8
   480 000003F0 8B4DFC                  mov ecx, [ebp - 4]
   481 000003F3 FF7104                  push dword [ecx + map.value]
   482 000003F6 68[0C000000]            push str_format
   483 000003FB E8(00000000)            call printf
   484 00000400 83C408                  add esp, 8
   485 00000403 68[78000000]            push tmp8
   486 00000408 68[0C000000]            push str_format
   487 0000040D E8(00000000)            call printf
   488 00000412 83C408                  add esp, 8
   489 00000415 8B4DF8                  mov ecx, [ebp - 8]
   490 00000418 FF31                    push dword [ecx + map.index]
   491 0000041A 68[00000000]            push int_format
   492 0000041F E8(00000000)            call printf
   493 00000424 83C408                  add esp, 8
   494 00000427 68[80000000]            push tmp9
   495 0000042C 68[0C000000]            push str_format
   496 00000431 E8(00000000)            call printf
   497 00000436 83C408                  add esp, 8
   498 00000439 8B4DF8                  mov ecx, [ebp - 8]
   499 0000043C FF7104                  push dword [ecx + map.value]
   500 0000043F 68[0C000000]            push str_format
   501 00000444 E8(00000000)            call printf
   502 00000449 83C408                  add esp, 8
   503 0000044C 68[88000000]            push tmp10
   504 00000451 68[0C000000]            push str_format
   505 00000456 E8(00000000)            call printf
   506 0000045B 83C408                  add esp, 8
   507 0000045E 60                      pusha
   508 0000045F 6A10                    push 16
   509 00000461 E8(00000000)            call malloc
   510 00000466 83C404                  add esp, 4
   511 00000469 8945F4                  mov [ebp - 12], eax
   512 0000046C 61                      popa
   513 0000046D FF75FC                  push dword [ebp - 4]
   514 00000470 58                      pop eax
   515 00000471 8B4DF4                  mov ecx, [ebp - 12]
   516 00000474 8B10                    mov edx, [eax  + map.index]
   517 00000476 895108                  mov [ecx + vecmap.x2 + map.index], edx
   518 00000479 50                      push eax
   519 0000047A 6800010000              push 256
   520 0000047F E8(00000000)            call malloc
   521 00000484 83C404                  add esp, 4
   522 00000487 89C3                    mov ebx, eax
   523 00000489 58                      pop eax
   524 0000048A 8B4DF4                  mov ecx, [ebp - 12]
   525 0000048D 8B5004                  mov edx, [eax  + map.value]
   526 00000490 89590C                  mov [ecx + vecmap.x2 + map.value], ebx
   527 00000493 60                      pusha
   528 00000494 52                      push edx
   529 00000495 53                      push ebx
   530 00000496 E8(00000000)            call strcpy
   531 0000049B 83C408                  add esp, 8
   532 0000049E 61                      popa
   533 0000049F FF75F8                  push dword [ebp - 8]
   534 000004A2 58                      pop eax
   535 000004A3 8B4DF4                  mov ecx, [ebp - 12]
   536 000004A6 8B10                    mov edx, [eax  + map.index]
   537 000004A8 8911                    mov [ecx + vecmap.x1 + map.index], edx
   538 000004AA 50                      push eax
   539 000004AB 6800010000              push 256
   540 000004B0 E8(00000000)            call malloc
   541 000004B5 83C404                  add esp, 4
   542 000004B8 89C3                    mov ebx, eax
   543 000004BA 58                      pop eax
   544 000004BB 8B4DF4                  mov ecx, [ebp - 12]
   545 000004BE 8B5004                  mov edx, [eax  + map.value]
   546 000004C1 895904                  mov [ecx + vecmap.x1 + map.value], ebx
   547 000004C4 60                      pusha
   548 000004C5 52                      push edx
   549 000004C6 53                      push ebx
   550 000004C7 E8(00000000)            call strcpy
   551 000004CC 83C408                  add esp, 8
   552 000004CF 61                      popa
   553 000004D0 60                      pusha
   554 000004D1 6A08                    push 8
   555 000004D3 E8(00000000)            call malloc
   556 000004D8 83C404                  add esp, 4
   557 000004DB 8945F0                  mov [ebp - 16], eax
   558 000004DE 61                      popa
   559 000004DF 6A00                    push 0
   560 000004E1 58                      pop eax
   561 000004E2 8B4DF0                  mov ecx, [ebp - 16]
   562 000004E5 894104                  mov [ecx + point.y], eax
   563 000004E8 6A00                    push 0
   564 000004EA 58                      pop eax
   565 000004EB 8B4DF0                  mov ecx, [ebp - 16]
   566 000004EE 8901                    mov [ecx + point.x], eax
   567 000004F0 60                      pusha
   568 000004F1 6A08                    push 8
   569 000004F3 E8(00000000)            call malloc
   570 000004F8 83C404                  add esp, 4
   571 000004FB 8945EC                  mov [ebp - 20], eax
   572 000004FE 61                      popa
   573 000004FF 6A04                    push 4
   574 00000501 58                      pop eax
   575 00000502 8B4DEC                  mov ecx, [ebp - 20]
   576 00000505 894104                  mov [ecx + point.y], eax
   577 00000508 6A03                    push 3
   578 0000050A 58                      pop eax
   579 0000050B 8B4DEC                  mov ecx, [ebp - 20]
   580 0000050E 8901                    mov [ecx + point.x], eax
   581 00000510 60                      pusha
   582 00000511 6A10                    push 16
   583 00000513 E8(00000000)            call malloc
   584 00000518 83C404                  add esp, 4
   585 0000051B 8945E4                  mov [ebp - 28], eax
   586 0000051E 61                      popa
   587 0000051F FF75F0                  push dword [ebp - 16]
   588 00000522 58                      pop eax
   589 00000523 8B4DE4                  mov ecx, [ebp - 28]
   590 00000526 8B10                    mov edx, [eax  + point.x]
   591 00000528 895108                  mov [ecx + vector.b + point.x], edx
   592 0000052B 8B4DE4                  mov ecx, [ebp - 28]
   593 0000052E 8B5004                  mov edx, [eax  + point.y]
   594 00000531 89510C                  mov [ecx + vector.b + point.y], edx
   595 00000534 FF75EC                  push dword [ebp - 20]
   596 00000537 58                      pop eax
   597 00000538 8B4DE4                  mov ecx, [ebp - 28]
   598 0000053B 8B10                    mov edx, [eax  + point.x]
   599 0000053D 8911                    mov [ecx + vector.a + point.x], edx
   600 0000053F 8B4DE4                  mov ecx, [ebp - 28]
   601 00000542 8B5004                  mov edx, [eax  + point.y]
   602 00000545 895104                  mov [ecx + vector.a + point.y], edx
   603 00000548 60                      pusha
   604 00000549 6A08                    push 8
   605 0000054B E8(00000000)            call malloc
   606 00000550 83C404                  add esp, 4
   607 00000553 8945E8                  mov [ebp - 24], eax
   608 00000556 61                      popa
   609 00000557 8B4DE4                  mov ecx, [ebp - 28]
   610 0000055A 51                      push ecx
   611 0000055B 58                      pop eax
   612 0000055C 8B4DE8                  mov ecx, [ebp - 24]
   613 0000055F 8B10                    mov edx, [eax  + vector.a + point.x]
   614 00000561 8911                    mov [ecx  + point.x], edx
   615 00000563 8B4DE8                  mov ecx, [ebp - 24]
   616 00000566 8B5004                  mov edx, [eax  + vector.a + point.y]
   617 00000569 895104                  mov [ecx  + point.y], edx
   618 0000056C FF75E8                  push dword [ebp - 24]
   619 0000056F 58                      pop eax
   620 00000570 8B4DE4                  mov ecx, [ebp - 28]
   621 00000573 8B10                    mov edx, [eax  + point.x]
   622 00000575 895108                  mov [ecx + vector.b + point.x], edx
   623 00000578 8B4DE4                  mov ecx, [ebp - 28]
   624 0000057B 8B5004                  mov edx, [eax  + point.y]
   625 0000057E 89510C                  mov [ecx + vector.b + point.y], edx
   626 00000581 68[90000000]            push tmp11
   627 00000586 68[0C000000]            push str_format
   628 0000058B E8(00000000)            call printf
   629 00000590 83C408                  add esp, 8
   630 00000593 8B4DE4                  mov ecx, [ebp - 28]
   631 00000596 FF31                    push dword [ecx + vector.a + point.x]
   632 00000598 68[00000000]            push int_format
   633 0000059D E8(00000000)            call printf
   634 000005A2 83C408                  add esp, 8
   635 000005A5 68[9C000000]            push tmp12
   636 000005AA 68[0C000000]            push str_format
   637 000005AF E8(00000000)            call printf
   638 000005B4 83C408                  add esp, 8
   639 000005B7 8B4DE4                  mov ecx, [ebp - 28]
   640 000005BA FF7104                  push dword [ecx + vector.a + point.y]
   641 000005BD 68[00000000]            push int_format
   642 000005C2 E8(00000000)            call printf
   643 000005C7 83C408                  add esp, 8
   644 000005CA 68[A8000000]            push tmp13
   645 000005CF 68[0C000000]            push str_format
   646 000005D4 E8(00000000)            call printf
   647 000005D9 83C408                  add esp, 8
   648 000005DC 8B4DE4                  mov ecx, [ebp - 28]
   649 000005DF FF7108                  push dword [ecx + vector.b + point.x]
   650 000005E2 68[00000000]            push int_format
   651 000005E7 E8(00000000)            call printf
   652 000005EC 83C408                  add esp, 8
   653 000005EF 68[B4000000]            push tmp14
   654 000005F4 68[0C000000]            push str_format
   655 000005F9 E8(00000000)            call printf
   656 000005FE 83C408                  add esp, 8
   657 00000601 8B4DE4                  mov ecx, [ebp - 28]
   658 00000604 FF710C                  push dword [ecx + vector.b + point.y]
   659 00000607 68[00000000]            push int_format
   660 0000060C E8(00000000)            call printf
   661 00000611 83C408                  add esp, 8
   662 00000614 68[C0000000]            push tmp15
   663 00000619 68[0C000000]            push str_format
   664 0000061E E8(00000000)            call printf
   665 00000623 83C408                  add esp, 8
   666 00000626 68[CC000000]            push tmp16
   667 0000062B 58                      pop eax
   668 0000062C 60                      pusha
   669 0000062D 6800010000              push 256
   670 00000632 E8(00000000)            call malloc
   671 00000637 83C404                  add esp, 4
   672 0000063A 8945E0                  mov [ebp - 32], eax
   673 0000063D 61                      popa
   674 0000063E 60                      pusha
   675 0000063F 50                      push eax
   676 00000640 FF75E0                  push dword [ebp - 32]
   677 00000643 E8(00000000)            call strcpy
   678 00000648 83C408                  add esp, 8
   679 0000064B 61                      popa
   680 0000064C 68[D8000000]            push tmp17
   681 00000651 58                      pop eax
   682 00000652 60                      pusha
   683 00000653 6800010000              push 256
   684 00000658 E8(00000000)            call malloc
   685 0000065D 83C404                  add esp, 4
   686 00000660 8945DC                  mov [ebp - 36], eax
   687 00000663 61                      popa
   688 00000664 60                      pusha
   689 00000665 50                      push eax
   690 00000666 FF75DC                  push dword [ebp - 36]
   691 00000669 E8(00000000)            call strcpy
   692 0000066E 83C408                  add esp, 8
   693 00000671 61                      popa
   694 00000672 FF75E0                  push dword [ebp - 32]
   695 00000675 FF75DC                  push dword [ebp - 36]
   696 00000678 E8(00000000)            call strcmp
   697 0000067D 83C408                  add esp, 8
   698 00000680 89C3                    mov ebx, eax
   699 00000682 83FB00                  cmp ebx, 0
   700 00000685 7407                    je L615
   701 00000687 B800000000              mov eax, 0
   702 0000068C EB05                    jmp L616
   703                                  L615:
   704 0000068E B801000000              mov eax, 1
   705                                  L616:
   706 00000693 50                      push eax
   707 00000694 58                      pop eax
   708 00000695 83F801                  cmp eax, 1
   709 00000698 7572                    jne L607
   710 0000069A 68[E4000000]            push tmp18
   711 0000069F 68[0C000000]            push str_format
   712 000006A4 E8(00000000)            call printf
   713 000006A9 83C408                  add esp, 8
   714 000006AC FF75E0                  push dword [ebp - 32]
   715 000006AF FF75DC                  push dword [ebp - 36]
   716 000006B2 6800010000              push 256
   717 000006B7 E8(00000000)            call malloc
   718 000006BC 83C404                  add esp, 4
   719 000006BF 5B                      pop ebx
   720 000006C0 5A                      pop edx
   721 000006C1 52                      push edx
   722 000006C2 50                      push eax
   723 000006C3 E8(00000000)            call strcpy
   724 000006C8 83C408                  add esp, 8
   725 000006CB 53                      push ebx
   726 000006CC 50                      push eax
   727 000006CD E8(00000000)            call strcat
   728 000006D2 83C408                  add esp, 8
   729 000006D5 50                      push eax
   730 000006D6 68[EC000000]            push tmp19
   731 000006DB 6800010000              push 256
   732 000006E0 E8(00000000)            call malloc
   733 000006E5 83C404                  add esp, 4
   734 000006E8 5B                      pop ebx
   735 000006E9 5A                      pop edx
   736 000006EA 52                      push edx
   737 000006EB 50                      push eax
   738 000006EC E8(00000000)            call strcpy
   739 000006F1 83C408                  add esp, 8
   740 000006F4 53                      push ebx
   741 000006F5 50                      push eax
   742 000006F6 E8(00000000)            call strcat
   743 000006FB 83C408                  add esp, 8
   744 000006FE 50                      push eax
   745 000006FF 68[0C000000]            push str_format
   746 00000704 E8(00000000)            call printf
   747 00000709 83C408                  add esp, 8
   748                                  L607:
   749 0000070C 6A00                    push 0
   750 0000070E 58                      pop eax
   751 0000070F 8B4DFC                  mov ecx, [ebp - 4]
   752 00000712 8B5104                  mov edx, [ecx  + map.value]
   753 00000715 60                      pusha
   754 00000716 52                      push edx
   755 00000717 E8(00000000)            call free
   756 0000071C 83C404                  add esp, 4
   757 0000071F 61                      popa
   758 00000720 60                      pusha
   759 00000721 FF75FC                  push dword [ebp - 4]
   760 00000724 E8(00000000)            call free
   761 00000729 83C404                  add esp, 4
   762 0000072C 61                      popa
   763 0000072D 8B4DF8                  mov ecx, [ebp - 8]
   764 00000730 8B5104                  mov edx, [ecx  + map.value]
   765 00000733 60                      pusha
   766 00000734 52                      push edx
   767 00000735 E8(00000000)            call free
   768 0000073A 83C404                  add esp, 4
   769 0000073D 61                      popa
   770 0000073E 60                      pusha
   771 0000073F FF75F8                  push dword [ebp - 8]
   772 00000742 E8(00000000)            call free
   773 00000747 83C404                  add esp, 4
   774 0000074A 61                      popa
   775 0000074B 60                      pusha
   776 0000074C FF75E4                  push dword [ebp - 28]
   777 0000074F E8(00000000)            call free
   778 00000754 83C404                  add esp, 4
   779 00000757 61                      popa
   780 00000758 8B4DF4                  mov ecx, [ebp - 12]
   781 0000075B 8B5104                  mov edx, [ecx  + vecmap.x1 + map.value]
   782 0000075E 60                      pusha
   783 0000075F 52                      push edx
   784 00000760 E8(00000000)            call free
   785 00000765 83C404                  add esp, 4
   786 00000768 61                      popa
   787 00000769 8B4DF4                  mov ecx, [ebp - 12]
   788 0000076C 8B510C                  mov edx, [ecx  + vecmap.x2 + map.value]
   789 0000076F 60                      pusha
   790 00000770 52                      push edx
   791 00000771 E8(00000000)            call free
   792 00000776 83C404                  add esp, 4
   793 00000779 61                      popa
   794 0000077A 60                      pusha
   795 0000077B FF75F4                  push dword [ebp - 12]
   796 0000077E E8(00000000)            call free
   797 00000783 83C404                  add esp, 4
   798 00000786 61                      popa
   799 00000787 60                      pusha
   800 00000788 FF75F0                  push dword [ebp - 16]
   801 0000078B E8(00000000)            call free
   802 00000790 83C404                  add esp, 4
   803 00000793 61                      popa
   804 00000794 60                      pusha
   805 00000795 FF75DC                  push dword [ebp - 36]
   806 00000798 E8(00000000)            call free
   807 0000079D 83C404                  add esp, 4
   808 000007A0 61                      popa
   809 000007A1 60                      pusha
   810 000007A2 FF75EC                  push dword [ebp - 20]
   811 000007A5 E8(00000000)            call free
   812 000007AA 83C404                  add esp, 4
   813 000007AD 61                      popa
   814 000007AE 60                      pusha
   815 000007AF FF75E8                  push dword [ebp - 24]
   816 000007B2 E8(00000000)            call free
   817 000007B7 83C404                  add esp, 4
   818 000007BA 61                      popa
   819 000007BB 60                      pusha
   820 000007BC FF75E0                  push dword [ebp - 32]
   821 000007BF E8(00000000)            call free
   822 000007C4 83C404                  add esp, 4
   823 000007C7 61                      popa
   824 000007C8 89EC                    mov esp, ebp
   825 000007CA 5D                      pop ebp
   826 000007CB C3                      ret
   827                                  
   828                                  
   829                                  
   830                                  power:
   831 000007CC 55                      push ebp
   832 000007CD 89E5                    mov ebp, esp
   833 000007CF 83EC08                  sub esp, 8
   834 000007D2 6A01                    push 1
   835 000007D4 58                      pop eax
   836 000007D5 8945FC                  mov [ebp - 4], eax
   837 000007D8 FF7508                  push dword [ebp + 8]
   838 000007DB 6A00                    push 0
   839 000007DD 5B                      pop ebx
   840 000007DE 5A                      pop edx
   841 000007DF 39DA                    cmp edx, ebx
   842 000007E1 7707                    ja  L665
   843 000007E3 B800000000              mov eax, 0
   844 000007E8 EB05                    jmp L666
   845                                  L665:
   846 000007EA B801000000              mov eax, 1
   847                                  L666:
   848 000007EF 50                      push eax
   849 000007F0 58                      pop eax
   850 000007F1 83F801                  cmp eax, 1
   851 000007F4 757B                    jne L659
   852                                  L660:
   853 000007F6 FF7508                  push dword [ebp + 8]
   854 000007F9 6A02                    push 2
   855 000007FB 5B                      pop ebx
   856 000007FC 58                      pop eax
   857 000007FD BA00000000              mov edx, 0
   858 00000802 F7FB                    idiv ebx
   859 00000804 89D0                    mov eax, edx
   860 00000806 50                      push eax
   861 00000807 6A01                    push 1
   862 00000809 5B                      pop ebx
   863 0000080A 5A                      pop edx
   864 0000080B 39DA                    cmp edx, ebx
   865 0000080D 7407                    je  L681
   866 0000080F B800000000              mov eax, 0
   867 00000814 EB05                    jmp L682
   868                                  L681:
   869 00000816 B801000000              mov eax, 1
   870                                  L682:
   871 0000081B 50                      push eax
   872 0000081C 58                      pop eax
   873 0000081D 83F801                  cmp eax, 1
   874 00000820 750F                    jne L673
   875 00000822 FF75FC                  push dword [ebp - 4]
   876 00000825 FF750C                  push dword [ebp + 12]
   877 00000828 5B                      pop ebx
   878 00000829 58                      pop eax
   879 0000082A F7EB                    imul ebx
   880 0000082C 50                      push eax
   881 0000082D 58                      pop eax
   882 0000082E 8945FC                  mov [ebp - 4], eax
   883                                  L673:
   884 00000831 FF750C                  push dword [ebp + 12]
   885 00000834 FF750C                  push dword [ebp + 12]
   886 00000837 5B                      pop ebx
   887 00000838 58                      pop eax
   888 00000839 F7EB                    imul ebx
   889 0000083B 50                      push eax
   890 0000083C 58                      pop eax
   891 0000083D 89450C                  mov [ebp + 12], eax
   892 00000840 FF7508                  push dword [ebp + 8]
   893 00000843 6A02                    push 2
   894 00000845 5B                      pop ebx
   895 00000846 58                      pop eax
   896 00000847 BA00000000              mov edx, 0
   897 0000084C F7FB                    idiv ebx
   898 0000084E 50                      push eax
   899 0000084F 58                      pop eax
   900 00000850 894508                  mov [ebp + 8], eax
   901 00000853 FF7508                  push dword [ebp + 8]
   902 00000856 6A00                    push 0
   903 00000858 5B                      pop ebx
   904 00000859 5A                      pop edx
   905 0000085A 39DA                    cmp edx, ebx
   906 0000085C 7707                    ja  L721
   907 0000085E B800000000              mov eax, 0
   908 00000863 EB05                    jmp L722
   909                                  L721:
   910 00000865 B801000000              mov eax, 1
   911                                  L722:
   912 0000086A 50                      push eax
   913 0000086B 58                      pop eax
   914 0000086C 83F801                  cmp eax, 1
   915 0000086F 7485                    je L660
   916                                  L659:
   917 00000871 FF75FC                  push dword [ebp - 4]
   918 00000874 58                      pop eax
   919 00000875 89EC                    mov esp, ebp
   920 00000877 5D                      pop ebp
   921 00000878 C20800                  ret 8
   922                                  
   923                                  
   924                                  
   925                                  section .data
   926 00000000 256400000A00000000-     int_format dd "%d", 10, 0
   927 00000009 000000             
   928 0000000C 257300000A00000000-     str_format dd "%s", 10, 0
   929 00000015 000000             
   930 00000018 00000000                globIntVar: dd 0
   931 0000001C 497420697320676C6F-     globStringVarWithInit: dd "It is global string", 0
   932 00000025 62616C20737472696E-
   933 0000002E 670000000000       
   934 00000034 00000000                globBoolVar: dd 0
   935 00000038 666972737400000000-     tmp1: dd "first", 0
   936 00000041 000000             
   937 00000044 2000000000000000        tmp2: dd " ", 0
   938 0000004C 2000000000000000        tmp3: dd " ", 0
   939 00000054 2000000000000000        tmp4: dd " ", 0
   940 0000005C 2000000000000000        tmp5: dd " ", 0
   941 00000064 7365636F6E64000000-     tmp6: dd "second", 0
   942 0000006D 000000             
   943 00000070 2000000000000000        tmp7: dd " ", 0
   944 00000078 2000000000000000        tmp8: dd " ", 0
   945 00000080 2000000000000000        tmp9: dd " ", 0
   946 00000088 2000000000000000        tmp10: dd " ", 0
   947 00000090 762E612E78203D2000-     tmp11: dd "v.a.x = ", 0
   948 00000099 000000             
   949 0000009C 762E612E79203D2000-     tmp12: dd "v.a.y = ", 0
   950 000000A5 000000             
   951 000000A8 762E622E78203D2000-     tmp13: dd "v.b.x = ", 0
   952 000000B1 000000             
   953 000000B4 762E622E79203D2000-     tmp14: dd "v.b.y = ", 0
   954 000000BD 000000             
   955 000000C0 202020202000000000-     tmp15: dd "     ", 0
   956 000000C9 000000             
   957 000000CC 68656C6C6F2C200000-     tmp16: dd "hello, ", 0
   958 000000D5 000000             
   959 000000D8 68656C6C6F2C200000-     tmp17: dd "hello, ", 0
   960 000000E1 000000             
   961 000000E4 2000000000000000        tmp18: dd " ", 0
   962 000000EC 6675636B6572732120-     tmp19: dd "fuckers! ", 0
   963 000000EC 00000000000000     
   964                                  
   965                                  section .bss
   966 00000000 <res 00000008>          motherfucker: resb firstClass.size
